{"version":3,"sources":["support.js","../../node_modules/loadjs/dist/loadjs.umd.js","storage.js","types.js","utils.js","html5.js","i18n.js","controls.js","captions.js","console.js","defaults.js","fullscreen.js","ui.js","listeners.js","plugins/vimeo.js","plugins/youtube.js","media.js","plugins/ads.js","source.js","plyr.js"],"names":["range","factory","devnull","bundleIdCache","bundleResultCache","bundleCallbackQueue","publish","bundleId","pathsNotFound","q","length","splice","executeCallbacks","args","depsNotFound","call","success","error","loadFile","path","callbackFn","numTries","isCss","e","doc","document","async","maxTries","numRetries","beforeCallbackFn","before","pathStripped","replace","test","createElement","rel","href","src","undefined","onload","onerror","onbeforeload","ev","result","type","sheet","cssText","x","defaultPrevented","head","appendChild","loadjs","paths","arg1","arg2","trim","fn","i","numWaiting","push","loadFiles","ready","deps","bundleIds","r","subscribe","done","reset","isDefined","module","exports","Storage","player","enabled","config","storage","key","supported","store","window","localStorage","getItem","this","utils","is","empty","json","JSON","parse","string","object","get","extend","setItem","stringify","removeItem","providers","types","input","getConstructor","Object","Number","isNaN","String","Boolean","Function","nullOrUndefined","Array","isArray","instanceof","WeakMap","NodeList","Element","Text","Event","TextTrackCue","VTTCue","TextTrack","kind","array","nodeList","keys","constructor","documentMode","documentElement","style","navigator","userAgent","platform","url","responseType","arguments","Promise","resolve","reject","request","XMLHttpRequest","addEventListener","responseText","response","Error","statusText","open","send","minWidth","image","Image","handler","naturalWidth","assign","id","hasId","exists","querySelectorAll","useStorage","container","toggleHidden","setAttribute","cached","data","content","fetch","then","catch","injectSprite","innerHTML","body","insertBefore","childNodes","prefix","Math","floor","random","elements","wrapper","targets","from","reverse","forEach","element","index","child","cloneNode","parent","parentNode","sibling","nextSibling","attributes","text","setAttributes","innerText","target","removeElement","removeChild","lastChild","newChild","oldChild","replaceChild","entries","_ref","_ref2","value","sel","existingAttributes","existing","split","s","selector","className","parts","charAt","class","hidden","hide","boolean","hasAttribute","removeAttribute","force","method","classList","contains","prototype","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","includes","querySelector","focused","activeElement","toggle","focusable","getElements","first","last","trap","event","keyCode","getFocusElement","shiftKey","focus","preventDefault","on","off","callback","passive","capture","function","Node","toggleListener","events","options","support","passiveListeners","bubbles","detail","CustomEvent","dispatchEvent","toggleState","pressed","getAttribute","state","_len","_key","toString","match","current","max","toFixed","parseInt","time","displayHours","inverted","number","formatTime","format","slice","hours","getHours","mins","getMinutes","secs","getSeconds","find","RegExp","toUpperCase","substr","toLowerCase","replaceAll","toTitleCase","toPascalCase","sources","_len2","_key2","source","shift","defineProperty","apply","concat","toConsumableArray","filter","item","indexOf","reduce","prev","curr","abs","youtube","vimeo","$2","parser","search","startsWith","parseUrl","params","hash","_hash$split2","val","decodeURIComponent","map","encodeURIComponent","join","fragment","createDocumentFragment","firstChild","width","height","ratio","getRatio","w","h","offsetHeight","provider","playsinline","api","ui","browser","getBrowser","canPlayInline","isIPhone","video","rangeInput","audio","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","isHTML5","canPlayType","isVideo","isAudio","removeEventListener","transitionEndEvent","matchMedia","html5","getSources","sizes","dedupe","mime","currentTime","playing","load","play","blankVideo","debug","log","i18n","seekTime","title","controls","cors","URL","iconUrl","location","host","isIE","svg4everybody","getElement","selectors","buttons","pause","restart","rewind","fastForward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","seekTooltip","classNames","tooltip","warn","toggleNativeControls","getIconUrl","iconPath","iconPrefix","icon","createElementNS","use","setAttributeNS","attr","badge","menu","buttonType","button","toCamelCase","label","labelPressed","iconPressed","control","createIcon","createLabel","getAttributesFromSelector","updateRangeFill","suffix","list","checked","radio","faux","insertAdjacentHTML","forceHours","setRange","muted","getPercentage","_this","getElementsByTagName","nodeValue","buffered","isWebkit","setProperty","tooltips","percent","clientRect","getBoundingClientRect","visible","_toggle","toggleClass","_this2","touch","pageX","left","hasClass","parseFloat","updateTimeDisplay","invert","invertTime","seeking","updateProgress","hasDuration","displayDuration","paused","updateSeekTooltip","setting","tabs","panes","quality","_this3","toggleTab","checkMenu","emptyElement","sort","a","b","sorting","getLabel","createMenuItem","createBadge","getBadge","updateSetting","pane","active","some","lang","language","default","getTracks","tracks","track","_this4","unshift","speed","isVimeo","_this5","values","tab","form","show","isMenuItem","isButton","stopPropagation","clone","position","opacity","name","scrollWidth","scrollHeight","getElementById","transitions","reducedMotion","size","getTabSize","restore","propertyName","createButton","createRange","createProgress","createTime","inner","home","_this6","back","setQualityMenu","getQualityOptions","setSpeedMenu","loadSprite","props","update","create","findElements","repaint","labels","_this7","stored","isYouTube","textTracks","setCaptionsMenu","insertAfter","hostname","protocol","blob","createObjectURL","setLanguage","setCue","mode","currentTrack","getCurrentTrack","activeCues","embed","enableTextTrack","cue","setText","getCueAsHTML","caption","noop","Console","console","bind","defaults","userLanguage","onChange","isIos","trapFocus","toggleFallback","scrollPosition","scrollX","scrollY","scrollTo","y","overflow","fallback","Fullscreen","property","native","iosNative","webkitEnterFullscreen","requestFullscreen","webkitExitFullscreen","action","cancelFullScreen","exitFullscreen","exit","enter","fullscreenElement","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","pre","uiSupported","listeners","inject","setup","loop","updateVolume","timeUpdate","checkPlaying","isTouch","setTitle","poster","backgroundImage","setPoster","isEmbed","iframe","enable","posterEnabled","loadPromise","loadImage","togglePoster","stopped","toggleControls","loading","timers","setTimeout","hideControls","hover","Listeners","lastKey","handleKey","toggleMenu","firstTouch","code","which","repeat","altKey","ctrlKey","metaKey","editable","togglePlay","increaseVolume","decreaseVolume","forward","toggleCaptions","keyboard","global","tabFocus","delay","durationUpdate","hasAudio","resetOnEnd","checkLoading","ads","initialized","managerPromise","clickToPlay","ended","disableContextMenu","set","inputEvent","proxy","defaultHandler","customHandlerKey","customHandler","returned","hasCustomHandler","showHomeTab","showTab","currentTarget","seekTo","toggleInvert","_player","noTransition","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","assurePlaybackState","setAspectRatio","Vimeo","loadScript","urls","sdk","padding","paddingBottom","offset","transform","autoplay","buildUrlParams","parseVimeoId","embedContainer","replaceElement","thumbnail_large","pathname","Player","autopause","disableTextTrack","stop","setVolume","setCurrentTime","selected","setPlaybackRate","setLoop","currentSrc","getVideoUrl","all","getVideoWidth","getVideoHeight","dimensions","getAspectRatio","setAutopause","getVideoTitle","getCurrentTime","getDuration","getTextTracks","cues","stripHTML","seconds","build","mapQualityUnit","YT","onYouTubeReadyCallbacks","onYouTubeIframeAPIReady","videoId","getVideoData","google","items","snippet","currentId","parseYouTubeId","generateId","posterSrc","backgroundSize","message","instance","playbackRate","getPlaybackRate","getTitle","playVideo","pauseVideo","stopVideo","getPlaybackQuality","setPlaybackQuality","getAvailablePlaybackRates","buffering","setInterval","getVideoLoadedFraction","lastBuffered","levels","getAvailableQualityLevels","level","unMute","wrap","Ads","publisherId","manager","loader","cuePoints","safetyTimer","countdownTimer","ima","googleIMA","trigger","startSafetyTimer","clearSafetyTimer","setupIMA","setVpaidMode","ImaSdkSettings","VpaidMode","ENABLED","setLocale","displayContainer","AdDisplayContainer","requestAds","AdsLoader","AdsManagerLoadedEvent","Type","ADS_MANAGER_LOADED","onAdsManagerLoaded","AdErrorEvent","AD_ERROR","onAdError","AdsRequest","adTagUrl","tagUrl","linearAdSlotWidth","offsetWidth","linearAdSlotHeight","nonLinearAdSlotWidth","nonLinearAdSlotHeight","forceNonLinearFullSlot","setAdWillPlayMuted","getRemainingTime","AdsRenderingSettings","restoreCustomPlaybackStateOnAdBreakComplete","enablePreloading","getAdsManager","getCuePoints","cuePoint","seekElement","cuePercentage","AdEvent","onAdEvent","ad","getAd","LOADED","pollCountdown","isLinear","ALL_ADS_COMPLETED","loadAds","CONTENT_PAUSE_REQUESTED","pauseContent","CONTENT_RESUME_REQUESTED","resumeContent","STARTED","MIDPOINT","COMPLETE","IMPRESSION","CLICK","cancel","contentComplete","_this8","seekedTime","discardAdBreak","resize","ViewMode","NORMAL","initialize","_this9","init","start","adError","zIndex","_this10","destroy","handlers","_this11","Date","now","base","insertElement","attribute","cancelRequests","check","crossorigin","addStyleHook","insertElements","Plyr","failed","jQuery","plyr","original","tagName","getProviderByUrl","getUrlParams","truthy","step","webkitShowPlaybackTargetPicker","isHidden","hiding","eventName","soft","clear","unload","targetTime","end","fauxDuration","realDuration","mozHasAudio","webkitAudioDecodedByteCount","audioTracks","closest","change","states","webkitPresentationMode","inline","t","cloneDeep"],"mappings":"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CJ,8BACF,oBACA,iBACH,eACC,iBACC,eACH,aACC,YACF,UACA,YACE,iBACG,mBACD,wBACM,uBAMN,gDACG,6CACH,wDAGA,yCACA,wHAGA,uEAMH,UACA,WACC,aACE,YACD,iBACK,UACP,YACE,cACE,gBACE,SACP,aACI,WACF,aACE,UACH,cACI,sBAQV,WACA,UACA,UACA,UACA,UACA,iBACA,YACA,aACA,iBACA,aACA,eACA,OACA,QACA,QACA,UACA,SACA,UACA,aACA,8BAIA,iBACA,kBACA,mBACA,iBACA,iBACA,gBACA,sBAIA,gBACA,+BAIA,kBACA,mBACA,YACA,cACA,cACA,iBACA,gBACA,gCAMU,uDACC,4BAEI,aACF,0BAEL,4BAEE,2BACC,8BACE,+BACD,mCACK,kCACP,8BACI,oCACE,+BACP,4BACI,iCACC,8BACJ,mCAGA,4BACE,6BACD,+BACG,iCACD,8CAGI,gCACH,+BACF,iCACA,+BACF,+BACE,mCAEF,2BACA,gCAEG,mDAMP,qBACI,kBACH,4BACA,mCACS,sCACR,6BACO,2BACV,oBACI,wBACA,uBACD,uBACC,wBACA,sBACF,sBACE,qBACH,oBACE,6BACM,4BACP,uBACE,6BACI,6BACC,kCAEH,0BACA,mBACD,qCAGG,gCACD,6CAGC,oCACC,4CAGC,6BACH,uCAGG,iCACH,iCAEF,+CAMI,wBACN,oCAMA,oBAMC,cACI,KC/XfmI,EAAU7P,EAAM8P,aAEtB,SAAS4N,OACA3d,KAAKT,aAKJmV,EAAS1U,KAAKV,OAAOqG,SAAS6M,QAAQU,WACxCjT,EAAMC,GAAG+F,QAAQyO,MACX1J,YAAY0J,EAAQ1U,KAAK4Y,UAI7B7N,cAAclP,KAAKmE,KAAKV,OAAQU,KAAK6G,OAAQ7G,KAAK4Y,OAAS,kBAAoB,kBAAkB,GAGlG9I,EAAQ8N,SACHC,UAAUhiB,KAAKmE,KAAKV,OAAQU,KAAK6G,OAAQ7G,KAAK4Y,SAI5D,SAASkF,QAAe1U,EAAgBnG,UAAAzH,OAAA,QAAA4B,IAAA6F,UAAA,IAAAA,UAAA,GAEhCmG,OACK2U,kBACEle,OAAOme,SAAW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","file":"plyr.min.js","sourcesContent":["// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, provider, playsinline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const canPlayInline = browser.isIPhone && playsinline && support.playsinline;\n\n        switch (`${provider}:${type}`) {\n            case 'html5:video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || canPlayInline);\n                break;\n\n            case 'html5:audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube:video':\n            case 'vimeo:video':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || canPlayInline);\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    playsinline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!this.isHTML5 || !utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Check directly if codecs specified\n            if (type.includes('codecs=')) {\n                return media.canPlayType(type).replace(/no/, '');\n            }\n\n            // Type specific checks\n            if (this.isVideo) {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.isAudio) {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // NOTE: Remember a device can be mouse + touch enabled so we check on first touch event\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEndEvent !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.loadjs = factory();\n  }\n}(this, function() {\n/**\n * Global dependencies.\n * @global {Object} document - DOM\n */\n\nvar devnull = function() {},\n    bundleIdCache = {},\n    bundleResultCache = {},\n    bundleCallbackQueue = {};\n\n\n/**\n * Subscribe to bundle load event.\n * @param {string[]} bundleIds - Bundle ids\n * @param {Function} callbackFn - The callback function\n */\nfunction subscribe(bundleIds, callbackFn) {\n  // listify\n  bundleIds = bundleIds.push ? bundleIds : [bundleIds];\n\n  var depsNotFound = [],\n      i = bundleIds.length,\n      numWaiting = i,\n      fn,\n      bundleId,\n      r,\n      q;\n\n  // define callback function\n  fn = function (bundleId, pathsNotFound) {\n    if (pathsNotFound.length) depsNotFound.push(bundleId);\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(depsNotFound);\n  };\n\n  // register callback\n  while (i--) {\n    bundleId = bundleIds[i];\n\n    // execute callback if in result cache\n    r = bundleResultCache[bundleId];\n    if (r) {\n      fn(bundleId, r);\n      continue;\n    }\n\n    // add to callback queue\n    q = bundleCallbackQueue[bundleId] = bundleCallbackQueue[bundleId] || [];\n    q.push(fn);\n  }\n}\n\n\n/**\n * Publish bundle load event.\n * @param {string} bundleId - Bundle id\n * @param {string[]} pathsNotFound - List of files not found\n */\nfunction publish(bundleId, pathsNotFound) {\n  // exit if id isn't defined\n  if (!bundleId) return;\n\n  var q = bundleCallbackQueue[bundleId];\n\n  // cache result\n  bundleResultCache[bundleId] = pathsNotFound;\n\n  // exit if queue is empty\n  if (!q) return;\n\n  // empty callback queue\n  while (q.length) {\n    q[0](bundleId, pathsNotFound);\n    q.splice(0, 1);\n  }\n}\n\n\n/**\n * Execute callbacks.\n * @param {Object or Function} args - The callback args\n * @param {string[]} depsNotFound - List of dependencies not found\n */\nfunction executeCallbacks(args, depsNotFound) {\n  // accept function as argument\n  if (args.call) args = {success: args};\n\n  // success and error callbacks\n  if (depsNotFound.length) (args.error || devnull)(depsNotFound);\n  else (args.success || devnull)(args);\n}\n\n\n/**\n * Load individual file.\n * @param {string} path - The file path\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFile(path, callbackFn, args, numTries) {\n  var doc = document,\n      async = args.async,\n      maxTries = (args.numRetries || 0) + 1,\n      beforeCallbackFn = args.before || devnull,\n      pathStripped = path.replace(/^(css|img)!/, ''),\n      isCss,\n      e;\n\n  numTries = numTries || 0;\n\n  if (/(^css!|\\.css$)/.test(path)) {\n    isCss = true;\n\n    // css\n    e = doc.createElement('link');\n    e.rel = 'stylesheet';\n    e.href = pathStripped; //.replace(/^css!/, '');  // remove \"css!\" prefix\n  } else if (/(^img!|\\.(png|gif|jpg|svg)$)/.test(path)) {\n    // image\n    e = doc.createElement('img');\n    e.src = pathStripped;    \n  } else {\n    // javascript\n    e = doc.createElement('script');\n    e.src = path;\n    e.async = async === undefined ? true : async;\n  }\n\n  e.onload = e.onerror = e.onbeforeload = function (ev) {\n    var result = ev.type[0];\n\n    // Note: The following code isolates IE using `hideFocus` and treats empty\n    // stylesheets as failures to get around lack of onerror support\n    if (isCss && 'hideFocus' in e) {\n      try {\n        if (!e.sheet.cssText.length) result = 'e';\n      } catch (x) {\n        // sheets objects created from load errors don't allow access to\n        // `cssText`\n        result = 'e';\n      }\n    }\n\n    // handle retries in case of load failure\n    if (result == 'e') {\n      // increment counter\n      numTries += 1;\n\n      // exit function and try again\n      if (numTries < maxTries) {\n        return loadFile(path, callbackFn, args, numTries);\n      }\n    }\n\n    // execute callback\n    callbackFn(path, result, ev.defaultPrevented);\n  };\n\n  // add to document (unless callback returns `false`)\n  if (beforeCallbackFn(path, e) !== false) doc.head.appendChild(e);\n}\n\n\n/**\n * Load multiple files.\n * @param {string[]} paths - The file paths\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFiles(paths, callbackFn, args) {\n  // listify paths\n  paths = paths.push ? paths : [paths];\n\n  var numWaiting = paths.length,\n      x = numWaiting,\n      pathsNotFound = [],\n      fn,\n      i;\n\n  // define callback function\n  fn = function(path, result, defaultPrevented) {\n    // handle error\n    if (result == 'e') pathsNotFound.push(path);\n\n    // handle beforeload event. If defaultPrevented then that means the load\n    // will be blocked (ex. Ghostery/ABP on Safari)\n    if (result == 'b') {\n      if (defaultPrevented) pathsNotFound.push(path);\n      else return;\n    }\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(pathsNotFound);\n  };\n\n  // load scripts\n  for (i=0; i < x; i++) loadFile(paths[i], fn, args);\n}\n\n\n/**\n * Initiate script load and register bundle.\n * @param {(string|string[])} paths - The file paths\n * @param {(string|Function)} [arg1] - The bundleId or success callback\n * @param {Function} [arg2] - The success or error callback\n * @param {Function} [arg3] - The error callback\n */\nfunction loadjs(paths, arg1, arg2) {\n  var bundleId,\n      args;\n\n  // bundleId (if string)\n  if (arg1 && arg1.trim) bundleId = arg1;\n\n  // args (default is {})\n  args = (bundleId ? arg2 : arg1) || {};\n\n  // throw error if bundle is already defined\n  if (bundleId) {\n    if (bundleId in bundleIdCache) {\n      throw \"LoadJS\";\n    } else {\n      bundleIdCache[bundleId] = true;\n    }\n  }\n\n  // load scripts\n  loadFiles(paths, function (pathsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, pathsNotFound);\n\n    // publish bundle load event\n    publish(bundleId, pathsNotFound);\n  }, args);\n}\n\n\n/**\n * Execute callbacks when dependencies have been satisfied.\n * @param {(string|string[])} deps - List of bundle ids\n * @param {Object} args - success/error arguments\n */\nloadjs.ready = function ready(deps, args) {\n  // subscribe to bundle load event\n  subscribe(deps, function (depsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, depsNotFound);\n  });\n\n  return loadjs;\n};\n\n\n/**\n * Manually satisfy bundle dependencies.\n * @param {string} bundleId - The bundle id\n */\nloadjs.done = function done(bundleId) {\n  publish(bundleId, []);\n};\n\n\n/**\n * Reset loadjs dependencies statuses\n */\nloadjs.reset = function reset() {\n  bundleIdCache = {};\n  bundleResultCache = {};\n  bundleCallbackQueue = {};\n};\n\n\n/**\n * Determine if bundle has already been defined\n * @param String} bundleId - The bundle id\n */\nloadjs.isDefined = function isDefined(bundleId) {\n  return bundleId in bundleIdCache;\n};\n\n\n// export\nreturn loadjs;\n\n}));\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport utils from './utils';\n\nclass Storage {\n    constructor(player) {\n        this.enabled = player.config.storage.enabled;\n        this.key = player.config.storage.key;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        try {\n            if (!('localStorage' in window)) {\n                return false;\n            }\n\n            const test = '___test';\n\n            // Try to use it (it might be disabled, e.g. user is in private mode)\n            // see: https://github.com/sampotts/plyr/issues/131\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        if (!Storage.supported) {\n            return null;\n        }\n\n        const store = window.localStorage.getItem(this.key);\n\n        if (utils.is.empty(store)) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return utils.is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!utils.is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        let storage = this.get();\n\n        // Default to empty object\n        if (utils.is.empty(storage)) {\n            storage = {};\n        }\n\n        // Update the working copy of the values\n        utils.extend(storage, object);\n\n        // Update storage\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n    }\n}\n\nexport default Storage;\n","// ==========================================================================\n// Plyr supported types and providers\n// ==========================================================================\n\nexport const providers = {\n    html5: 'html5',\n    youtube: 'youtube',\n    vimeo: 'vimeo',\n};\n\nexport const types = {\n    audio: 'audio',\n    video: 'video',\n};\n\nexport default { providers, types };\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport loadjs from 'loadjs';\nimport Storage from './storage';\nimport support from './support';\nimport { providers } from './types';\n\nconst utils = {\n    // Check variable types\n    is: {\n        object(input) {\n            return this.getConstructor(input) === Object;\n        },\n        number(input) {\n            return this.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return this.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return this.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return this.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !this.nullOrUndefined(input) && Array.isArray(input);\n        },\n        weakMap(input) {\n            return this.instanceof(input, WeakMap);\n        },\n        nodeList(input) {\n            return this.instanceof(input, NodeList);\n        },\n        element(input) {\n            return this.instanceof(input, Element);\n        },\n        textNode(input) {\n            return this.getConstructor(input) === Text;\n        },\n        event(input) {\n            return this.instanceof(input, Event);\n        },\n        cue(input) {\n            return this.instanceof(input, TextTrackCue) || this.instanceof(input, VTTCue);\n        },\n        track(input) {\n            return this.instanceof(input, TextTrack) || (!this.nullOrUndefined(input) && this.string(input.kind));\n        },\n        url(input) {\n            return !this.nullOrUndefined(input) && /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/.test(input);\n        },\n        nullOrUndefined(input) {\n            return input === null || typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                this.nullOrUndefined(input) ||\n                ((this.string(input) || this.array(input) || this.nodeList(input)) && !input.length) ||\n                (this.object(input) && !Object.keys(input).length)\n            );\n        },\n        instanceof(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n        getConstructor(input) {\n            return !this.nullOrUndefined(input) ? input.constructor : null;\n        },\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Fetch wrapper\n    // Using XHR to avoid issues with older browsers\n    fetch(url, responseType = 'text') {\n        return new Promise((resolve, reject) => {\n            try {\n                const request = new XMLHttpRequest();\n\n                // Check for CORS support\n                if (!('withCredentials' in request)) {\n                    return;\n                }\n\n                request.addEventListener('load', () => {\n                    if (responseType === 'text') {\n                        try {\n                            resolve(JSON.parse(request.responseText));\n                        } catch (e) {\n                            resolve(request.responseText);\n                        }\n                    } else {\n                        resolve(request.response);\n                    }\n                });\n\n                request.addEventListener('error', () => {\n                    throw new Error(request.statusText);\n                });\n\n                request.open('GET', url, true);\n\n                // Set the required response type\n                request.responseType = responseType;\n\n                request.send();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    },\n\n    // Load image avoiding xhr/fetch CORS issues\n    // Server status can't be obtained this way unfortunately, so this uses \"naturalWidth\" to determine if the image has loaded.\n    // By default it checks if it is at least 1px, but you can add a second argument to change this.\n    loadImage(src, minWidth = 1) {\n        return new Promise((resolve, reject) => {\n            const image = new Image();\n            const handler = () => {\n                delete image.onload;\n                delete image.onerror;\n                (image.naturalWidth >= minWidth ? resolve : reject)(image);\n            };\n            Object.assign(image, {onload: handler, onerror: handler, src});\n        });\n    },\n\n    // Load an external script\n    loadScript(url) {\n        return new Promise((resolve, reject) => {\n            loadjs(url, {\n                success: resolve,\n                error: reject,\n            });\n        });\n    },\n\n    // Load an external SVG sprite\n    loadSprite(url, id) {\n        if (!utils.is.string(url)) {\n            return;\n        }\n\n        const prefix = 'cache-';\n        const hasId = utils.is.string(id);\n        let isCached = false;\n\n        const exists = () => document.querySelectorAll(`#${id}`).length;\n\n        function injectSprite(data) {\n            // Check again incase of race condition\n            if (hasId && exists()) {\n                return;\n            }\n\n            // Inject content\n            this.innerHTML = data;\n\n            // Inject the SVG to the body\n            document.body.insertBefore(this, document.body.childNodes[0]);\n        }\n\n        // Only load once if ID set\n        if (!hasId || !exists()) {\n            const useStorage = Storage.supported;\n\n            // Create container\n            const container = document.createElement('div');\n            utils.toggleHidden(container, true);\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (useStorage) {\n                const cached = window.localStorage.getItem(prefix + id);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    injectSprite.call(container, data.content);\n                    return;\n                }\n            }\n\n            // Get the sprite\n            utils\n                .fetch(url)\n                .then(result => {\n                    if (utils.is.empty(result)) {\n                        return;\n                    }\n\n                    if (useStorage) {\n                        window.localStorage.setItem(\n                            prefix + id,\n                            JSON.stringify({\n                                content: result,\n                            }),\n                        );\n                    }\n\n                    injectSprite.call(container, result);\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.innerText = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove element(s)\n    removeElement(element) {\n        if (utils.is.nodeList(element) || utils.is.array(element)) {\n            Array.from(element).forEach(utils.removeElement);\n            return;\n        }\n\n        if (!utils.is.element(element) || !utils.is.element(element.parentNode)) {\n            return;\n        }\n\n        element.parentNode.removeChild(element);\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Replace element\n    replaceElement(newChild, oldChild) {\n        if (!utils.is.element(oldChild) || !utils.is.element(oldChild.parentNode) || !utils.is.element(newChild)) {\n            return null;\n        }\n\n        oldChild.parentNode.replaceChild(newChild, oldChild);\n\n        return newChild;\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        if (!utils.is.element(element) || utils.is.empty(attributes)) {\n            return;\n        }\n\n        Object.entries(attributes).forEach(([\n            key,\n            value,\n        ]) => {\n            element.setAttribute(key, value);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle hidden\n    toggleHidden(element, hidden) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        let hide = hidden;\n\n        if (!utils.is.boolean(hide)) {\n            hide = !element.hasAttribute('hidden');\n        }\n\n        if (hide) {\n            element.setAttribute('hidden', '');\n        } else {\n            element.removeAttribute('hidden');\n        }\n    },\n\n    // Mirror Element.classList.toggle, with IE compatibility for \"force\" argument\n    toggleClass(element, className, force) {\n        if (utils.is.element(element)) {\n            let method = 'toggle';\n            if (typeof force !== 'undefined') {\n                method = force ? 'add' : 'remove';\n            }\n\n            element.classList[method](className);\n            return element.classList.contains(className);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.element(element) && element.classList.contains(className);\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches = prototype.matches || prototype.webkitMatchesSelector || prototype.mozMatchesSelector || prototype.msMatchesSelector || match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus(element = null, toggle = false) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        const focusable = utils.getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n        const first = focusable[0];\n        const last = focusable[focusable.length - 1];\n\n        const trap = event => {\n            // Bail if not tab key or not fullscreen\n            if (event.key !== 'Tab' || event.keyCode !== 9) {\n                return;\n            }\n\n            // Get the current focused element\n            const focused = utils.getFocusElement();\n\n            if (focused === last && !event.shiftKey) {\n                // Move focus to first element that can be tabbed if Shift isn't used\n                first.focus();\n                event.preventDefault();\n            } else if (focused === first && event.shiftKey) {\n                // Move focus to last element that can be tabbed if Shift is used\n                last.focus();\n                event.preventDefault();\n            }\n        };\n\n        if (toggle) {\n            utils.on(this.elements.container, 'keydown', trap, false);\n        } else {\n            utils.off(this.elements.container, 'keydown', trap, false);\n        }\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle = false, passive = true, capture = false) {\n        // Bail if no elemetns, event, or callback\n        if (utils.is.empty(elements) || utils.is.empty(event) || !utils.is.function(callback)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements) || utils.is.array(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just the capture boolean for browsers with no passive listener support\n        let options = capture;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive,\n                // Whether the listener is a capturing listener or not\n                capture,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n\n    // Bind event handler\n    on(element, events = '', callback, passive = true, capture = false) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Unbind event handler\n    off(element, events = '', callback, passive = true, capture = false) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type = '', bubbles = false, detail = {}) {\n        // Bail if no element\n        if (!utils.is.element(element) || utils.is.empty(type)) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles,\n            detail: Object.assign({}, detail, {\n                plyr: this,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    toggleState(element, input) {\n        // If multiple elements passed\n        if (utils.is.array(element) || utils.is.nodeList(element)) {\n            Array.from(element).forEach(target => utils.toggleState(target, input));\n            return;\n        }\n\n        // Bail if no target\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        // Get state\n        const pressed = element.getAttribute('aria-pressed') === 'true';\n        const state = utils.is.boolean(input) ? input : !pressed;\n\n        // Set the attribute on target\n        element.setAttribute('aria-pressed', state);\n    },\n\n    // Format string\n    format(input, ...args) {\n        if (utils.is.empty(input)) {\n            return input;\n        }\n\n        return input.toString().replace(/{(\\d+)}/g, (match, i) => (utils.is.string(args[i]) ? args[i] : ''));\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Time helpers\n    getHours(value) {\n        return parseInt((value / 60 / 60) % 60, 10);\n    },\n    getMinutes(value) {\n        return parseInt((value / 60) % 60, 10);\n    },\n    getSeconds(value) {\n        return parseInt(value % 60, 10);\n    },\n\n    // Format time to UI friendly string\n    formatTime(time = 0, displayHours = false, inverted = false) {\n        // Bail if the value isn't a number\n        if (!utils.is.number(time)) {\n            return this.formatTime(null, displayHours, inverted);\n        }\n\n        // Format time component to add leading zero\n        const format = value => `0${value}`.slice(-2);\n\n        // Breakdown to hours, mins, secs\n        let hours = this.getHours(time);\n        const mins = this.getMinutes(time);\n        const secs = this.getSeconds(time);\n\n        // Do we need to display hours?\n        if (displayHours || hours > 0) {\n            hours = `${hours}:`;\n        } else {\n            hours = '';\n        }\n\n        // Render\n        return `${inverted ? '-' : ''}${hours}${format(mins)}:${format(secs)}`;\n    },\n\n    // Replace all occurances of a string in a string\n    replaceAll(input = '', find = '', replace = '') {\n        return input.replace(new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'), replace.toString());\n    },\n\n    // Convert to title case\n    toTitleCase(input = '') {\n        return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n    },\n\n    // Convert string to pascalCase\n    toPascalCase(input = '') {\n        let string = input.toString();\n\n        // Convert kebab case\n        string = utils.replaceAll(string, '-', ' ');\n\n        // Convert snake case\n        string = utils.replaceAll(string, '_', ' ');\n\n        // Convert to title case\n        string = utils.toTitleCase(string);\n\n        // Convert to pascal case\n        return utils.replaceAll(string, ' ', '');\n    },\n\n    // Convert string to pascalCase\n    toCamelCase(input = '') {\n        let string = input.toString();\n\n        // Convert to pascal case\n        string = utils.toPascalCase(string);\n\n        // Convert first character to lowercase\n        return string.charAt(0).toLowerCase() + string.slice(1);\n    },\n\n    // Deep extend destination object with N more objects\n    extend(target = {}, ...sources) {\n        if (!sources.length) {\n            return target;\n        }\n\n        const source = sources.shift();\n\n        if (!utils.is.object(source)) {\n            return target;\n        }\n\n        Object.keys(source).forEach(key => {\n            if (utils.is.object(source[key])) {\n                if (!Object.keys(target).includes(key)) {\n                    Object.assign(target, { [key]: {} });\n                }\n\n                utils.extend(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        });\n\n        return utils.extend(target, ...sources);\n    },\n\n    // Remove duplicates in an array\n    dedupe(array) {\n        if (!utils.is.array(array)) {\n            return array;\n        }\n\n        return array.filter((item, index) => array.indexOf(item) === index);\n    },\n\n    // Clone nested objects\n    cloneDeep(object) {\n        return JSON.parse(JSON.stringify(object));\n    },\n\n    // Get the closest value in an array\n    closest(array, value) {\n        if (!utils.is.array(array) || !array.length) {\n            return null;\n        }\n\n        return array.reduce((prev, curr) => (Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev));\n    },\n\n    // Get the provider for a given URL\n    getProviderByUrl(url) {\n        // YouTube\n        if (/^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)\\/.+$/.test(url)) {\n            return providers.youtube;\n        }\n\n        // Vimeo\n        if (/^https?:\\/\\/player.vimeo.com\\/video\\/\\d{0,9}(?=\\b|\\/)/.test(url)) {\n            return providers.vimeo;\n        }\n\n        return null;\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert a URL to a location object\n    parseUrl(url) {\n        const parser = document.createElement('a');\n        parser.href = url;\n        return parser;\n    },\n\n    // Get URL query parameters\n    getUrlParams(input) {\n        let search = input;\n\n        // Parse URL if needed\n        if (input.startsWith('http://') || input.startsWith('https://')) {\n            ({ search } = this.parseUrl(input));\n        }\n\n        if (this.is.empty(search)) {\n            return null;\n        }\n\n        const hashes = search.slice(search.indexOf('?') + 1).split('&');\n\n        return hashes.reduce((params, hash) => {\n            const [\n                key,\n                val,\n            ] = hash.split('=');\n\n            return Object.assign(params, { [key]: decodeURIComponent(val) });\n        }, {});\n    },\n\n    // Convert object to URL parameters\n    buildUrlParams(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Get aspect ratio for dimensions\n    getAspectRatio(width, height) {\n        const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n        const ratio = getRatio(width, height);\n        return `${width / ratio}:${height / ratio}`;\n    },\n\n    // Get the transition end event\n    get transitionEndEvent() {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return utils.is.string(type) ? events[type] : false;\n    },\n\n    // Force repaint of element\n    repaint(element) {\n        setTimeout(() => {\n            utils.toggleHidden(element, true);\n            element.offsetHeight; // eslint-disable-line\n            utils.toggleHidden(element, false);\n        }, 0);\n    },\n};\n\nexport default utils;\n","// ==========================================================================\n// Plyr HTML5 helpers\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\n\nconst html5 = {\n    getSources() {\n        if (!this.isHTML5) {\n            return null;\n        }\n\n        return this.media.querySelectorAll('source');\n    },\n\n    // Get quality levels\n    getQualityOptions() {\n        if (!this.isHTML5) {\n            return null;\n        }\n\n        // Get sources\n        const sources = html5.getSources.call(this);\n\n        if (utils.is.empty(sources)) {\n            return null;\n        }\n\n        // Get <source> with size attribute\n        const sizes = Array.from(sources).filter(source => !utils.is.empty(source.getAttribute('size')));\n\n        // If none, bail\n        if (utils.is.empty(sizes)) {\n            return null;\n        }\n\n        // Reduce to unique list\n        return utils.dedupe(sizes.map(source => Number(source.getAttribute('size'))));\n    },\n\n    extend() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        const player = this;\n\n        // Quality\n        Object.defineProperty(player.media, 'quality', {\n            get() {\n                // Get sources\n                const sources = html5.getSources.call(player);\n\n                if (utils.is.empty(sources)) {\n                    return null;\n                }\n\n                const matches = Array.from(sources).filter(source => source.getAttribute('src') === player.source);\n\n                if (utils.is.empty(matches)) {\n                    return null;\n                }\n\n                return Number(matches[0].getAttribute('size'));\n            },\n            set(input) {\n                // Get sources\n                const sources = html5.getSources.call(player);\n\n                if (utils.is.empty(sources)) {\n                    return;\n                }\n\n                // Get matches for requested size\n                const matches = Array.from(sources).filter(source => Number(source.getAttribute('size')) === input);\n\n                // No matches for requested size\n                if (utils.is.empty(matches)) {\n                    return;\n                }\n\n                // Get supported sources\n                const supported = matches.filter(source => support.mime.call(player, source.getAttribute('type')));\n\n                // No supported sources\n                if (utils.is.empty(supported)) {\n                    return;\n                }\n\n                // Trigger change event\n                utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                    quality: input,\n                });\n\n                // Get current state\n                const { currentTime, playing } = player;\n\n                // Set new source\n                player.media.src = supported[0].getAttribute('src');\n\n                // Load new source\n                player.media.load();\n\n                // Resume playing\n                if (playing) {\n                    player.play();\n                }\n\n                // Restore time\n                player.currentTime = currentTime;\n\n                // Trigger change event\n                utils.dispatchEvent.call(player, player.media, 'qualitychange', false, {\n                    quality: input,\n                });\n            },\n        });\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        utils.removeElement(html5.getSources());\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.debug.log('Cancelled network requests');\n    },\n};\n\nexport default html5;\n","// ==========================================================================\n// Plyr internationalization\n// ==========================================================================\n\nimport utils from './utils';\n\nconst i18n = {\n    get(key = '', config = {}) {\n        if (utils.is.empty(key) || utils.is.empty(config) || !Object.keys(config.i18n).includes(key)) {\n            return '';\n        }\n\n        let string = config.i18n[key];\n\n        const replace = {\n            '{seektime}': config.seekTime,\n            '{title}': config.title,\n        };\n\n        Object.entries(replace).forEach(([\n            key,\n            value,\n        ]) => {\n            string = utils.replaceAll(string, key, value);\n        });\n\n        return string;\n    },\n};\n\nexport default i18n;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport captions from './captions';\nimport html5 from './html5';\nimport i18n from './i18n';\nimport support from './support';\nimport utils from './utils';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst controls = {\n\n\n    // Get icon URL\n    getIconUrl() {\n        const url = new URL(this.config.iconUrl, window.location);\n        const cors = url.host !== window.location.host || (browser.isIE && !window.svg4everybody);\n\n        return {\n            url: this.config.iconUrl,\n            cors,\n        };\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                fastForward: utils.getElement.call(this, this.config.selectors.buttons.fastForward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n            };\n\n            // Seek tooltip\n            if (utils.is.element(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`);\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.debug.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.cors ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n                focusable: 'false',\n            }),\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type, attr) {\n        let text = i18n.get(type, this.config);\n        const attributes = Object.assign({}, attr);\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        if ('class' in attributes) {\n            attributes.class += ` ${this.config.classNames.hidden}`;\n        } else {\n            attributes.class = this.config.classNames.hidden;\n        }\n\n        return utils.createElement('span', attributes, text);\n    },\n\n    // Create a badge\n    createBadge(text) {\n        if (utils.is.empty(text)) {\n            return null;\n        }\n\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text,\n            ),\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = utils.toCamelCase(buttonType);\n\n        let toggle = false;\n        let label;\n        let icon;\n        let labelPressed;\n        let iconPressed;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.includes(this.config.classNames.control)) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (buttonType) {\n            case 'play':\n                toggle = true;\n                label = 'play';\n                labelPressed = 'pause';\n                icon = 'play';\n                iconPressed = 'pause';\n                break;\n\n            case 'mute':\n                toggle = true;\n                label = 'mute';\n                labelPressed = 'unmute';\n                icon = 'volume';\n                iconPressed = 'muted';\n                break;\n\n            case 'captions':\n                toggle = true;\n                label = 'enableCaptions';\n                labelPressed = 'disableCaptions';\n                icon = 'captions-off';\n                iconPressed = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                toggle = true;\n                label = 'enterFullscreen';\n                labelPressed = 'exitFullscreen';\n                icon = 'enter-fullscreen';\n                iconPressed = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class += ` ${this.config.classNames.control}--overlaid`;\n                type = 'play';\n                label = 'play';\n                icon = 'play';\n                break;\n\n            default:\n                label = type;\n                icon = buttonType;\n        }\n\n        // Setup toggle icon and labels\n        if (toggle) {\n            // Icon\n            button.appendChild(controls.createIcon.call(this, iconPressed, { class: 'icon--pressed' }));\n            button.appendChild(controls.createIcon.call(this, icon, { class: 'icon--not-pressed' }));\n\n            // Label/Tooltip\n            button.appendChild(controls.createLabel.call(this, labelPressed, { class: 'label--pressed' }));\n            button.appendChild(controls.createLabel.call(this, label, { class: 'label--not-pressed' }));\n\n            // Add aria attributes\n            attributes['aria-pressed'] = false;\n        } else {\n            button.appendChild(controls.createIcon.call(this, icon));\n            button.appendChild(controls.createLabel.call(this, label));\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        utils.setAttributes(button, attributes);\n\n        // We have multiple play buttons\n        if (type === 'play') {\n            if (!utils.is.array(this.elements.buttons[type])) {\n                this.elements.buttons[type] = [];\n            }\n\n            this.elements.buttons[type].push(button);\n        } else {\n            this.elements.buttons[type] = button;\n        }\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = utils.createElement(\n            'label',\n            {\n                for: attributes.id,\n                id: `${attributes.id}-label`,\n                class: this.config.classNames.hidden,\n            },\n            i18n.get(type, this.config),\n        );\n\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                    // A11y fixes for https://github.com/sampotts/plyr/issues/905\n                    role: 'slider',\n                    'aria-labelledby': `${attributes.id}-label`,\n                    'aria-valuemin': 0,\n                    'aria-valuemax': 100,\n                    'aria-valuenow': 0,\n                },\n                attributes,\n            ),\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                    role: 'presentation',\n                    'aria-hidden': true,\n                },\n                attributes,\n            ),\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = i18n.get('played', this.config);\n                    break;\n\n                case 'buffer':\n                    suffix = i18n.get('buffered', this.config);\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.innerText = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const attributes = utils.getAttributesFromSelector(this.config.selectors.display[type]);\n\n        const container = utils.createElement('div', utils.extend(attributes, {\n            class: `plyr__time ${attributes.class}`,\n            'aria-label': i18n.get(type, this.config),\n        }), '00:00');\n\n        // Reference for updates\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Create a settings menu item\n    createMenuItem(value, list, type, title, badge = null, checked = false) {\n        const item = utils.createElement('li');\n\n        const label = utils.createElement('label', {\n            class: this.config.classNames.control,\n        });\n\n        const radio = utils.createElement(\n            'input',\n            utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs[type]), {\n                type: 'radio',\n                name: `plyr-${type}`,\n                value,\n                checked,\n                class: 'plyr__sr-only',\n            }),\n        );\n\n        const faux = utils.createElement('span', { hidden: '' });\n\n        label.appendChild(radio);\n        label.appendChild(faux);\n        label.insertAdjacentHTML('beforeend', title);\n\n        if (utils.is.element(badge)) {\n            label.appendChild(badge);\n        }\n\n        item.appendChild(label);\n        list.appendChild(item);\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(target = null, time = 0, inverted = false) {\n        // Bail if there's no element to display or the value isn't a number\n        if (!utils.is.element(target) || !utils.is.number(time)) {\n            return;\n        }\n\n        // Always display hours if duration is over an hour\n        const forceHours = utils.getHours(this.duration) > 0;\n\n        // eslint-disable-next-line no-param-reassign\n        target.innerText = utils.formatTime(time, forceHours, inverted);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (utils.is.element(this.elements.inputs.volume)) {\n            controls.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update mute state\n        if (utils.is.element(this.elements.buttons.mute)) {\n            utils.toggleState(this.elements.buttons.mute, this.muted || this.volume === 0);\n        }\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value = 0) {\n        if (!utils.is.element(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui || !utils.is.event(event)) {\n            return;\n        }\n\n        let value = 0;\n\n        const setProgress = (target, input) => {\n            const value = utils.is.number(input) ? input : 0;\n            const progress = utils.is.element(target) ? target : this.elements.display.buffer;\n\n            // Update value and label\n            if (utils.is.element(progress)) {\n                progress.value = value;\n\n                // Update text label inside\n                const label = progress.getElementsByTagName('span')[0];\n                if (utils.is.element(label)) {\n                    label.childNodes[0].nodeValue = value;\n                }\n            }\n        };\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                case 'seeked':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        controls.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    setProgress(this.elements.display.buffer, this.buffered * 100);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.element(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Set aria value for https://github.com/sampotts/plyr/issues/905\n        range.setAttribute('aria-valuenow', range.value);\n\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Set CSS custom property\n        range.style.setProperty('--value', `${range.value / range.max * 100}%`);\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.element(this.elements.inputs.seek) ||\n            !utils.is.element(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.progress.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        const toggle = toggle => {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, toggle);\n        };\n\n        // Hide on touch\n        if (this.touch) {\n            toggle(false);\n            return;\n        }\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = parseFloat(this.elements.display.seekTooltip.style.left, 10);\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        controls.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && [\n            'mouseenter',\n            'mouseleave',\n        ].includes(event.type)) {\n            toggle(event.type === 'mouseenter');\n        }\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Only invert if only one time element is displayed and used for both duration and currentTime\n        const invert = !utils.is.element(this.elements.display.duration) && this.config.invertTime;\n\n        // Duration\n        controls.updateTimeDisplay.call(this, this.elements.display.currentTime, invert ? this.duration - this.currentTime : this.currentTime, invert);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        controls.updateProgress.call(this, event);\n    },\n\n    // Show the duration on metadataloaded or durationchange events\n    durationUpdate() {\n        // Bail if no ui or durationchange event triggered after playing/seek when invertTime is false\n        if (!this.supported.ui || (!this.config.invertTime && this.currentTime)) {\n            return;\n        }\n\n        // If there's a spot to display duration\n        const hasDuration = utils.is.element(this.elements.display.duration);\n\n        // If there's only one time display, display duration there\n        if (!hasDuration && this.config.displayDuration && this.paused) {\n            controls.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n        }\n\n        // If there's a duration element, update content\n        if (hasDuration) {\n            controls.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        utils.toggleHidden(this.elements.settings.tabs[setting], !toggle);\n    },\n\n    // Set the quality menu\n    // TODO: Vimeo support\n    setQualityMenu(options) {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.quality)) {\n            return;\n        }\n\n        const type = 'quality';\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.options.quality.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            let label = '';\n\n            switch (quality) {\n                case 2160:\n                    label = '4K';\n                    break;\n\n                case 1440:\n                case 1080:\n                case 720:\n                    label = 'HD';\n                    break;\n\n                case 576:\n                case 480:\n                    label = 'SD';\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        // Sort options by the config and then render options\n        this.options.quality\n            .sort((a, b) => {\n                const sorting = this.config.quality.options;\n                return sorting.indexOf(a) > sorting.indexOf(b) ? 1 : -1;\n            })\n            .forEach(quality => {\n                const label = controls.getLabel.call(this, 'quality', quality);\n                controls.createMenuItem.call(this, quality, list, type, label, getBadge(quality));\n            });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Translate a value into a nice label\n    // TODO: Localisation\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? i18n.get('normal', this.config) : `${value}&times;`;\n\n            case 'quality':\n                if (utils.is.number(value)) {\n                    return `${value}p`;\n                }\n\n                return utils.toTitleCase(value);\n\n            case 'captions':\n                return captions.getLabel.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container, input) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                if (this.captions.active) {\n                    if (this.options.captions.length > 2 || !this.options.captions.some(lang => lang === 'enabled')) {\n                        value = this.captions.language;\n                    } else {\n                        value = 'enabled';\n                    }\n                } else {\n                    value = '';\n                }\n\n                break;\n\n            default:\n                value = !utils.is.empty(input) ? input : this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!utils.is.empty(this.options[setting]) && !this.options[setting].includes(value)) {\n                    this.debug.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.debug.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.element(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // If there's no list it means it's not been rendered...\n        if (!utils.is.element(list)) {\n            return;\n        }\n\n        // Update the label\n        const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n        label.innerHTML = controls.getLabel.call(this, setting, value);\n\n        // Find the radio option and check it\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (utils.is.element(target)) {\n            target.checked = true;\n        }\n    },\n\n    // Set the looping options\n    /* setLoopMenu() {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.loop)) {\n            return;\n        }\n\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.loop, false);\n        utils.toggleHidden(this.elements.settings.panes.loop, false);\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                i18n.get(option, this.config)\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    }, */\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        // TODO: Captions or language? Currently it's mixed\n        const type = 'captions';\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n\n        // Toggle the pane and tab\n        const toggle = captions.getTracks.call(this).length;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If there's no captions, bail\n        if (!toggle) {\n            return;\n        }\n\n        // Re-map the tracks into just the data we need\n        const tracks = captions.getTracks.call(this).map(track => ({\n            language: !utils.is.empty(track.language) ? track.language : 'enabled',\n            label: captions.getLabel.call(this, track),\n        }));\n\n        // Add the \"Disabled\" option to turn off captions\n        tracks.unshift({\n            language: '',\n            label: i18n.get('disabled', this.config),\n        });\n\n        // Generate options\n        tracks.forEach(track => {\n            controls.createMenuItem.call(\n                this,\n                track.language,\n                list,\n                'language',\n                track.label,\n                track.language !== 'enabled' ? controls.createBadge.call(this, track.language.toUpperCase()) : null,\n                track.language.toLowerCase() === this.captions.language.toLowerCase(),\n            );\n        });\n\n        // Store reference\n        this.options.captions = tracks.map(track => track.language);\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu(options) {\n        // Do nothing if not selected\n        if (!this.config.controls.includes('settings') || !this.config.settings.includes('speed')) {\n            return;\n        }\n\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.speed)) {\n            return;\n        }\n\n        const type = 'speed';\n\n        // Set the speed options\n        if (utils.is.array(options)) {\n            this.options.speed = options;\n        } else if (this.isHTML5 || this.isVimeo) {\n            this.options.speed = [\n                0.5,\n                0.75,\n                1,\n                1.25,\n                1.5,\n                1.75,\n                2,\n            ];\n        }\n\n        // Set options if passed and filter based on config\n        this.options.speed = this.options.speed.filter(speed => this.config.speed.options.includes(speed));\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed) && this.options.speed.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => {\n            const label = controls.getLabel.call(this, 'speed', speed);\n            controls.createMenuItem.call(this, speed, list, type, label);\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Check if we need to hide/show the settings menu\n    checkMenu() {\n        const { tabs } = this.elements.settings;\n        const visible = !utils.is.empty(tabs) && Object.values(tabs).some(tab => !tab.hidden);\n\n        utils.toggleHidden(this.elements.settings.menu, !visible);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n\n        // Menu and button are required\n        if (!utils.is.element(form) || !utils.is.element(button)) {\n            return;\n        }\n\n        const show = utils.is.boolean(event) ? event : utils.is.element(form) && form.hasAttribute('hidden');\n\n        if (utils.is.event(event)) {\n            const isMenuItem = utils.is.element(form) && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (utils.is.element(button)) {\n            button.setAttribute('aria-expanded', show);\n        }\n\n        if (utils.is.element(form)) {\n            utils.toggleHidden(form, !show);\n            utils.toggleClass(this.elements.container, this.config.classNames.menu.open, show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.removeAttribute('hidden');\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(target = '') {\n        const { menu } = this.elements.settings;\n        const pane = document.getElementById(target);\n\n        // Nothing to show, bail\n        if (!utils.is.element(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"]:not([hidden])');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || ![\n                    'width',\n                    'height',\n                ].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                utils.off(container, utils.transitionEndEvent, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.on(container, utils.transitionEndEvent, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        utils.toggleHidden(current, true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        utils.toggleHidden(pane, false);\n\n        const tabs = utils.getElements.call(this, `[aria-controls=\"${target}\"]`);\n        Array.from(tabs).forEach(tab => {\n            tab.setAttribute('aria-expanded', true);\n        });\n        pane.removeAttribute('tabindex');\n\n        // Focus the first item\n        pane.querySelectorAll('button:not(:disabled), input:not(:disabled), [tabindex]')[0].focus();\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.controls.wrapper));\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play/Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.progress));\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        role: 'tooltip',\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00',\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('div', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                utils.extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                }),\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            this.elements.volume = volume;\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n                hidden: '',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                }),\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                hidden: '',\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    i18n.get(type, this.config),\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    hidden: '',\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    i18n.get(type, this.config),\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.isHTML5) {\n            controls.setQualityMenu.call(this, html5.getQualityOptions.call(this));\n        }\n\n        controls.setSpeedMenu.call(this);\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.cors) {\n                utils.loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n        this.elements.controls = null;\n\n        // Set template properties\n        const props = {\n            id: this.id,\n            seektime: this.config.seekTime,\n            title: this.config.title,\n        };\n        let update = true;\n\n        if (utils.is.string(this.config.controls) || utils.is.element(this.config.controls)) {\n            // String or HTMLElement passed as the option\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls.call(this, props);\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: captions.getLabel.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n            update = false;\n        }\n\n        // Replace props with their value\n        const replace = input => {\n            let result = input;\n\n            Object.entries(props).forEach(([\n                key,\n                value,\n            ]) => {\n                result = utils.replaceAll(result, `{${key}}`, value);\n            });\n\n            return result;\n        };\n\n        // Update markup\n        if (update) {\n            if (utils.is.string(this.config.controls)) {\n                container = replace(container);\n            } else if (utils.is.element(container)) {\n                container.innerHTML = replace(container.innerHTML);\n            }\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.element(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.element(container)) {\n            target.appendChild(container);\n        } else if (container) {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (!utils.is.element(this.elements.controls)) {\n            controls.findElements.call(this);\n        }\n\n        // Edge sometimes doesn't finish the paint so force a redraw\n        if (window.navigator.userAgent.includes('Edge')) {\n            utils.repaint(target);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join(''),\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n                label.setAttribute('role', 'tooltip');\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Captions\n// TODO: Create as class\n// ==========================================================================\n\nimport controls from './controls';\nimport i18n from './i18n';\nimport support from './support';\nimport utils from './utils';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Set default language if not set\n        const stored = this.storage.get('language');\n\n        if (!utils.is.empty(stored)) {\n            this.captions.language = stored;\n        }\n\n        if (utils.is.empty(this.captions.language)) {\n            this.captions.language = this.config.captions.language.toLowerCase();\n        }\n\n        // Set captions enabled state if not set\n        if (!utils.is.boolean(this.captions.active)) {\n            const active = this.storage.get('captions');\n\n            if (utils.is.boolean(active)) {\n                this.captions.active = active;\n            } else {\n                this.captions.active = this.config.captions.active;\n            }\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!this.isVideo || this.isYouTube || (this.isHTML5 && !support.textTracks)) {\n            // Clear menu and hide\n            if (utils.is.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!utils.is.element(this.elements.captions)) {\n            this.elements.captions = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.captions));\n\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Set the class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.enabled, !utils.is.empty(captions.getTracks.call(this)));\n\n        // Get tracks\n        const tracks = captions.getTracks.call(this);\n\n        // If no caption file exists, hide container for caption text\n        if (utils.is.empty(tracks)) {\n            return;\n        }\n\n        // Get browser info\n        const browser = utils.getBrowser();\n\n        // Fix IE captions if CORS is used\n        // Fetch captions and inject as blobs instead (data URIs not supported!)\n        if (browser.isIE && window.URL) {\n            const elements = this.media.querySelectorAll('track');\n\n            Array.from(elements).forEach(track => {\n                const src = track.getAttribute('src');\n                const href = utils.parseUrl(src);\n\n                if (href.hostname !== window.location.href.hostname && [\n                    'http:',\n                    'https:',\n                ].includes(href.protocol)) {\n                    utils\n                        .fetch(src, 'blob')\n                        .then(blob => {\n                            track.setAttribute('src', window.URL.createObjectURL(blob));\n                        })\n                        .catch(() => {\n                            utils.removeElement(track);\n                        });\n                }\n            });\n        }\n\n        // Set language\n        captions.setLanguage.call(this);\n\n        // Enable UI\n        captions.show.call(this);\n\n        // Set available languages in list\n        if (utils.is.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    // Set the captions language\n    setLanguage() {\n        // Setup HTML5 track rendering\n        if (this.isHTML5 && this.isVideo) {\n            captions.getTracks.call(this).forEach(track => {\n                // Show track\n                utils.on(track, 'cuechange', event => captions.setCue.call(this, event));\n\n                // Turn off native caption rendering to avoid double captions\n                // eslint-disable-next-line\n                track.mode = 'hidden';\n            });\n\n            // Get current track\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            // Check if suported kind\n            if (utils.is.track(currentTrack)) {\n                // If we change the active track while a cue is already displayed we need to update it\n                if (Array.from(currentTrack.activeCues || []).length) {\n                    captions.setCue.call(this, currentTrack);\n                }\n            }\n        } else if (this.isVimeo && this.captions.active) {\n            this.embed.enableTextTrack(this.language);\n        }\n    },\n\n    // Get the tracks\n    getTracks() {\n        // Return empty array at least\n        if (utils.is.nullOrUndefined(this.media)) {\n            return [];\n        }\n\n        // Only get accepted kinds\n        return Array.from(this.media.textTracks || []).filter(track => [\n            'captions',\n            'subtitles',\n        ].includes(track.kind));\n    },\n\n    // Get the current track for the current language\n    getCurrentTrack() {\n        const tracks = captions.getTracks.call(this);\n\n        if (!tracks.length) {\n            return null;\n        }\n\n        // Get track based on current language\n        let track = tracks.find(track => track.language.toLowerCase() === this.language);\n\n        // Get the <track> with default attribute\n        if (!track) {\n            track = utils.getElement.call(this, 'track[default]');\n        }\n\n        // Get the first track\n        if (!track) {\n            [track] = tracks;\n        }\n\n        return track;\n    },\n\n    // Get UI label for track\n    getLabel(track) {\n        let currentTrack = track;\n\n        if (!utils.is.track(currentTrack) && support.textTracks && this.captions.active) {\n            currentTrack = captions.getCurrentTrack.call(this);\n        }\n\n        if (utils.is.track(currentTrack)) {\n            if (!utils.is.empty(currentTrack.label)) {\n                return currentTrack.label;\n            }\n\n            if (!utils.is.empty(currentTrack.language)) {\n                return track.language.toUpperCase();\n            }\n\n            return i18n.get('enabled', this.config);\n        }\n\n        return i18n.get('disabled', this.config);\n    },\n\n    // Display active caption if it contains text\n    setCue(input) {\n        // Get the track from the event if needed\n        const track = utils.is.event(input) ? input.target : input;\n        const { activeCues } = track;\n        const active = activeCues.length && activeCues[0];\n        const currentTrack = captions.getCurrentTrack.call(this);\n\n        // Only display current track\n        if (track !== currentTrack) {\n            return;\n        }\n\n        // Display a cue, if there is one\n        if (utils.is.cue(active)) {\n            captions.setText.call(this, active.getCueAsHTML());\n        } else {\n            captions.setText.call(this, null);\n        }\n\n        utils.dispatchEvent.call(this, this.media, 'cuechange');\n    },\n\n    // Set the current caption\n    setText(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (utils.is.element(this.elements.captions)) {\n            const content = utils.createElement('span');\n\n            // Empty the container\n            utils.emptyElement(this.elements.captions);\n\n            // Default to empty\n            const caption = !utils.is.nullOrUndefined(input) ? input : '';\n\n            // Set the span content\n            if (utils.is.string(caption)) {\n                content.innerText = caption.trim();\n            } else {\n                content.appendChild(caption);\n            }\n\n            // Set new caption text\n            this.elements.captions.appendChild(content);\n        } else {\n            this.debug.warn('No captions element to render to');\n        }\n    },\n\n    // Display captions container and button (for initialization)\n    show() {\n        // Try to load the value from storage\n        let active = this.storage.get('captions');\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.config.captions);\n        } else {\n            this.captions.active = active;\n        }\n\n        if (active) {\n            utils.toggleClass(this.elements.container, this.config.classNames.captions.active, true);\n            utils.toggleState(this.elements.buttons.captions, true);\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(enabled = false) {\n        this.enabled = window.console && enabled;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n    }\n    get warn() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n    }\n    get error() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n    }\n}\n","// ==========================================================================\n// Plyr default config\n// ==========================================================================\n\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Only allow one media playing at once (vimeo only)\n    autopause: true,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n\n    // Invert the current time to be a countdown\n    invertTime: true,\n\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video container to play/pause\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Reset to start when playback ended\n    resetOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/3.3.7/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 576,\n        options: [\n            4320,\n            2880,\n            2160,\n            1440,\n            1080,\n            720,\n            576,\n            480,\n            360,\n            240,\n            'default', // YouTube's \"auto\"\n        ],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [\n            0.5,\n            0.75,\n            1,\n            1.25,\n            1.5,\n            1.75,\n            2,\n        ],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: (navigator.language || navigator.userLanguage).split('-')[0],\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n        iosNative: false, // Use the native fullscreen in iOS (disables custom controls)\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        // 'restart',\n        // 'rewind',\n        'play',\n        // 'fast-forward',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: [\n        'captions',\n        'quality',\n        'speed',\n    ],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime}s',\n        play: 'Play',\n        pause: 'Pause',\n        fastForward: 'Forward {seektime}s',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        mute: 'Mute',\n        unmute: 'Unmute',\n        enableCaptions: 'Enable captions',\n        disableCaptions: 'Disable captions',\n        enterFullscreen: 'Enter fullscreen',\n        exitFullscreen: 'Exit fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        normal: 'Normal',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        disabled: 'Disabled',\n        enabled: 'Enabled',\n        advertisement: 'Ad',\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            sdk: 'https://player.vimeo.com/api/player.js',\n            iframe: 'https://player.vimeo.com/video/{0}?{1}',\n            api: 'https://vimeo.com/api/v2/video/{0}.json',\n        },\n        youtube: {\n            sdk: 'https://www.youtube.com/iframe_api',\n            api: 'https://www.googleapis.com/youtube/v3/videos?id={0}&key={1}&fields=items(snippet(title))&part=snippet',\n        },\n        googleIMA: {\n            sdk: 'https://imasdk.googleapis.com/js/sdkloader/ima3.js',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        fastForward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n\n        // Ads\n        'adsloaded',\n        'adscontentpause',\n        'adscontentresume',\n        'adstarted',\n        'adsmidpoint',\n        'adscomplete',\n        'adsallcomplete',\n        'adsimpression',\n        'adsclick',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            fastForward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress--buffer',\n            played: '.plyr__progress--played',\n            loop: '.plyr__progress--loop',\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        type: 'plyr--{0}',\n        provider: 'plyr--{0}',\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        embedContainer: 'plyr__video-embed__container',\n        poster: 'plyr__poster',\n        posterEnabled: 'plyr__poster-enabled',\n        ads: 'plyr__ads',\n        control: 'plyr__control',\n        playing: 'plyr--playing',\n        paused: 'plyr--paused',\n        stopped: 'plyr--stopped',\n        loading: 'plyr--loading',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        cues: 'plyr__cues',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        noTransition: 'plyr--no-transition',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n            open: 'plyr--menu-open',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n\n    // Embed attributes\n    attributes: {\n        embed: {\n            provider: 'data-plyr-provider',\n            id: 'data-plyr-embed-id',\n        },\n    },\n\n    // API keys\n    keys: {\n        google: null,\n    },\n\n    // Advertisements plugin\n    // Register for an account here: http://vi.ai/publisher-video-monetization/?aid=plyrio\n    ads: {\n        enabled: false,\n        publisherId: '',\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Fullscreen wrapper\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API#prefixing\n// ==========================================================================\n\nimport utils from './utils';\n\nconst browser = utils.getBrowser();\n\nfunction onChange() {\n    if (!this.enabled) {\n        return;\n    }\n\n    // Update toggle button\n    const button = this.player.elements.buttons.fullscreen;\n    if (utils.is.element(button)) {\n        utils.toggleState(button, this.active);\n    }\n\n    // Trigger an event\n    utils.dispatchEvent.call(this.player, this.target, this.active ? 'enterfullscreen' : 'exitfullscreen', true);\n\n    // Trap focus in container\n    if (!browser.isIos) {\n        utils.trapFocus.call(this.player, this.target, this.active);\n    }\n}\n\nfunction toggleFallback(toggle = false) {\n    // Store or restore scroll position\n    if (toggle) {\n        this.scrollPosition = {\n            x: window.scrollX || 0,\n            y: window.scrollY || 0,\n        };\n    } else {\n        window.scrollTo(this.scrollPosition.x, this.scrollPosition.y);\n    }\n\n    // Toggle scroll\n    document.body.style.overflow = toggle ? 'hidden' : '';\n\n    // Toggle class hook\n    utils.toggleClass(this.target, this.player.config.classNames.fullscreen.fallback, toggle);\n\n    // Toggle button and fire events\n    onChange.call(this);\n}\n\nclass Fullscreen {\n    constructor(player) {\n        // Keep reference to parent\n        this.player = player;\n\n        // Get prefix\n        this.prefix = Fullscreen.prefix;\n        this.property = Fullscreen.property;\n\n        // Scroll position\n        this.scrollPosition = { x: 0, y: 0 };\n\n        // Register event listeners\n        // Handle event (incase user presses escape etc)\n        utils.on(document, this.prefix === 'ms' ? 'MSFullscreenChange' : `${this.prefix}fullscreenchange`, () => {\n            // TODO: Filter for target??\n            onChange.call(this);\n        });\n\n        // Fullscreen toggle on double click\n        utils.on(this.player.elements.container, 'dblclick', event => {\n            // Ignore double click in controls\n            if (utils.is.element(this.player.elements.controls) && this.player.elements.controls.contains(event.target)) {\n                return;\n            }\n\n            this.toggle();\n        });\n\n        // Update the UI\n        this.update();\n    }\n\n    // Determine if native supported\n    static get native() {\n        return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);\n    }\n\n    // Get the prefix for handlers\n    static get prefix() {\n        // No prefix\n        if (utils.is.function(document.exitFullscreen)) {\n            return '';\n        }\n\n        // Check for fullscreen support by vendor prefix\n        let value = '';\n        const prefixes = [\n            'webkit',\n            'moz',\n            'ms',\n        ];\n\n        prefixes.some(pre => {\n            if (utils.is.function(document[`${pre}ExitFullscreen`]) || utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            }\n\n            return false;\n        });\n\n        return value;\n    }\n\n    static get property() {\n        return this.prefix === 'moz' ? 'FullScreen' : 'Fullscreen';\n    }\n\n    // Determine if fullscreen is enabled\n    get enabled() {\n        return (\n            (Fullscreen.native || this.player.config.fullscreen.fallback) &&\n            this.player.config.fullscreen.enabled &&\n            this.player.supported.ui &&\n            this.player.isVideo\n        );\n    }\n\n    // Get active state\n    get active() {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Fallback using classname\n        if (!Fullscreen.native) {\n            return utils.hasClass(this.target, this.player.config.classNames.fullscreen.fallback);\n        }\n\n        const element = !this.prefix ? document.fullscreenElement : document[`${this.prefix}${this.property}Element`];\n\n        return element === this.target;\n    }\n\n    // Get target element\n    get target() {\n        return browser.isIos && this.player.config.fullscreen.iosNative ? this.player.media : this.player.elements.container;\n    }\n\n    // Update UI\n    update() {\n        if (this.enabled) {\n            this.player.debug.log(`${Fullscreen.native ? 'Native' : 'Fallback'} fullscreen enabled`);\n        } else {\n            this.player.debug.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Add styling hook to show button\n        utils.toggleClass(this.player.elements.container, this.player.config.classNames.fullscreen.enabled, this.enabled);\n    }\n\n    // Make an element fullscreen\n    enter() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen doesn't need the request step\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            if (this.player.playing) {\n                this.target.webkitEnterFullscreen();\n            }\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, true);\n        } else if (!this.prefix) {\n            this.target.requestFullscreen();\n        } else if (!utils.is.empty(this.prefix)) {\n            this.target[`${this.prefix}Request${this.property}`]();\n        }\n    }\n\n    // Bail from fullscreen\n    exit() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            this.target.webkitExitFullscreen();\n            this.player.play();\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, false);\n        } else if (!this.prefix) {\n            (document.cancelFullScreen || document.exitFullscreen).call(document);\n        } else if (!utils.is.empty(this.prefix)) {\n            const action = this.prefix === 'moz' ? 'Cancel' : 'Exit';\n            document[`${this.prefix}${action}${this.property}`]();\n        }\n    }\n\n    // Toggle state\n    toggle() {\n        if (!this.active) {\n            this.enter();\n        } else {\n            this.exit();\n        }\n    }\n}\n\nexport default Fullscreen;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport captions from './captions';\nimport controls from './controls';\nimport i18n from './i18n';\nimport support from './support';\nimport utils from './utils';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle = false) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling?\n        this.listeners.media();\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.debug.warn(`Basic support only for ${this.provider} ${this.type}`);\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.element(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            this.listeners.controls();\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Captions\n        captions.setup.call(this);\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = null;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality setting\n        this.quality = null;\n\n        // Reset volume display\n        controls.updateVolume.call(this);\n\n        // Reset time display\n        controls.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Check for picture-in-picture support\n        utils.toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo);\n\n        // Check for airplay support\n        utils.toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5);\n\n        // Add iOS class\n        utils.toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n        // Add touch class\n        utils.toggleClass(this.elements.container, this.config.classNames.isTouch, this.touch);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        setTimeout(() => {\n            utils.dispatchEvent.call(this, this.media, 'ready');\n        }, 0);\n\n        // Set the title\n        ui.setTitle.call(this);\n\n        // Assure the poster image is set, if the property was added before the element was created\n        if (this.poster && this.elements.poster && !this.elements.poster.style.backgroundImage) {\n            ui.setPoster.call(this, this.poster);\n        }\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = i18n.get('play', this.config);\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.element(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n            const format = i18n.get('frameTitle', this.config);\n\n            iframe.setAttribute('title', format.replace('{title}', title));\n        }\n    },\n\n    // Toggle poster\n    togglePoster(enable) {\n        utils.toggleClass(this.elements.container, this.config.classNames.posterEnabled, enable);\n    },\n\n    // Set the poster image (async)\n    setPoster(poster) {\n        // Set property regardless of validity\n        this.media.setAttribute('poster', poster);\n\n        // Bail if element is missing\n        if (!utils.is.element(this.elements.poster)) {\n            return Promise.reject();\n        }\n\n        // Load the image, and set poster if successful\n        const loadPromise = utils.loadImage(poster)\n            .then(() => {\n                this.elements.poster.style.backgroundImage = `url('${poster}')`;\n                Object.assign(this.elements.poster.style, {\n                    backgroundImage: `url('${poster}')`,\n                    // Reset backgroundSize as well (since it can be set to \"cover\" for padded thumbnails for youtube)\n                    backgroundSize: '',\n                });\n                ui.togglePoster.call(this, true);\n                return poster;\n            });\n\n        // Hide the element if the poster can't be loaded (otherwise it will just be a black element covering the video)\n        loadPromise.catch(() => ui.togglePoster.call(this, false));\n\n        // Return the promise so the caller can use it as well\n        return loadPromise;\n    },\n\n    // Check playing state\n    checkPlaying(event) {\n        // Class hooks\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n        utils.toggleClass(this.elements.container, this.config.classNames.paused, this.paused);\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.stopped);\n\n        // Set ARIA state\n        utils.toggleState(this.elements.buttons.play, this.playing);\n\n        // Only update controls on non timeupdate events\n        if (utils.is.event(event) && event.type === 'timeupdate') {\n            return;\n        }\n\n        // Toggle controls\n        ui.toggleControls.call(this);\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = [\n            'stalled',\n            'waiting',\n        ].includes(event.type);\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Update progress bar loading class state\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Update controls visibility\n            ui.toggleControls.call(this);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Toggle controls based on state and `force` argument\n    toggleControls(force) {\n        const { controls } = this.elements;\n\n        if (controls && this.config.hideControls) {\n            // Show controls if force, loading, paused, or button interaction, otherwise hide\n            this.toggleControls(Boolean(force || this.loading || this.paused || controls.pressed || controls.hover));\n        }\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport controls from './controls';\nimport ui from './ui';\nimport utils from './utils';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nclass Listeners {\n    constructor(player) {\n        this.player = player;\n        this.lastKey = null;\n\n        this.handleKey = this.handleKey.bind(this);\n        this.toggleMenu = this.toggleMenu.bind(this);\n        this.firstTouch = this.firstTouch.bind(this);\n    }\n\n    // Handle key presses\n    handleKey(event) {\n        const code = event.keyCode ? event.keyCode : event.which;\n        const pressed = event.type === 'keydown';\n        const repeat = pressed && code === this.lastKey;\n\n        // Bail if a modifier key is set\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n            return;\n        }\n\n        // If the event is bubbled from the media element\n        // Firefox doesn't get the keycode for whatever reason\n        if (!utils.is.number(code)) {\n            return;\n        }\n\n        // Seek by the number keys\n        const seekByKey = () => {\n            // Divide the max duration into 10th's and times by the number value\n            this.player.currentTime = this.player.duration / 10 * (code - 48);\n        };\n\n        // Handle the key on keydown\n        // Reset on keyup\n        if (pressed) {\n            // Which keycodes should we prevent default\n            const preventDefault = [\n                48,\n                49,\n                50,\n                51,\n                52,\n                53,\n                54,\n                56,\n                57,\n                32,\n                75,\n                38,\n                40,\n                77,\n                39,\n                37,\n                70,\n                67,\n                73,\n                76,\n                79,\n            ];\n\n            // Check focused element\n            // and if the focused element is not editable (e.g. text input)\n            // and any that accept key input http://webaim.org/techniques/keyboard/\n            const focused = utils.getFocusElement();\n            if (utils.is.element(focused) && utils.matches(focused, this.player.config.selectors.editable)) {\n                return;\n            }\n\n            // If the code is found prevent default (e.g. prevent scrolling for arrows)\n            if (preventDefault.includes(code)) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n            switch (code) {\n                case 48:\n                case 49:\n                case 50:\n                case 51:\n                case 52:\n                case 53:\n                case 54:\n                case 55:\n                case 56:\n                case 57:\n                    // 0-9\n                    if (!repeat) {\n                        seekByKey();\n                    }\n                    break;\n\n                case 32:\n                case 75:\n                    // Space and K key\n                    if (!repeat) {\n                        this.player.togglePlay();\n                    }\n                    break;\n\n                case 38:\n                    // Arrow up\n                    this.player.increaseVolume(0.1);\n                    break;\n\n                case 40:\n                    // Arrow down\n                    this.player.decreaseVolume(0.1);\n                    break;\n\n                case 77:\n                    // M key\n                    if (!repeat) {\n                        this.player.muted = !this.player.muted;\n                    }\n                    break;\n\n                case 39:\n                    // Arrow forward\n                    this.player.forward();\n                    break;\n\n                case 37:\n                    // Arrow back\n                    this.player.rewind();\n                    break;\n\n                case 70:\n                    // F key\n                    this.player.fullscreen.toggle();\n                    break;\n\n                case 67:\n                    // C key\n                    if (!repeat) {\n                        this.player.toggleCaptions();\n                    }\n                    break;\n\n                case 76:\n                    // L key\n                    this.player.loop = !this.player.loop;\n                    break;\n\n                /* case 73:\n                    this.setLoop('start');\n                    break;\n\n                case 76:\n                    this.setLoop();\n                    break;\n\n                case 79:\n                    this.setLoop('end');\n                    break; */\n\n                default:\n                    break;\n            }\n\n            // Escape is handle natively when in full screen\n            // So we only need to worry about non native\n            if (!this.player.fullscreen.enabled && this.player.fullscreen.active && code === 27) {\n                this.player.fullscreen.toggle();\n            }\n\n            // Store last code for next cycle\n            this.lastKey = code;\n        } else {\n            this.lastKey = null;\n        }\n    }\n\n    // Toggle menu\n    toggleMenu(event) {\n        controls.toggleMenu.call(this.player, event);\n    }\n\n    // Device is touch enabled\n    firstTouch() {\n        this.player.touch = true;\n\n        // Add touch class\n        utils.toggleClass(this.player.elements.container, this.player.config.classNames.isTouch, true);\n\n        // Clean up\n        utils.off(document.body, 'touchstart', this.firstTouch);\n    }\n\n    // Global window & document listeners\n    global(toggle = true) {\n        // Keyboard shortcuts\n        if (this.player.config.keyboard.global) {\n            utils.toggleListener(window, 'keydown keyup', this.handleKey, toggle, false);\n        }\n\n        // Click anywhere closes menu\n        utils.toggleListener(document.body, 'click', this.toggleMenu, toggle);\n\n        // Detect touch by events\n        utils.on(document.body, 'touchstart', this.firstTouch);\n    }\n\n    // Container listeners\n    container() {\n        // Keyboard shortcuts\n        if (!this.player.config.keyboard.global && this.player.config.keyboard.focused) {\n            utils.on(this.player.elements.container, 'keydown keyup', this.handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.player.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.player.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        utils.on(this.player.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.player.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls on mouse events and entering fullscreen\n        utils.on(this.player.elements.container, 'mousemove mouseleave touchstart touchmove enterfullscreen exitfullscreen', event => {\n            const { controls } = this.player.elements;\n\n            // Remove button states for fullscreen\n            if (event.type === 'enterfullscreen') {\n                controls.pressed = false;\n                controls.hover = false;\n            }\n\n            // Show, then hide after a timeout unless another control event occurs\n            const show = [\n                'touchstart',\n                'touchmove',\n                'mousemove',\n            ].includes(event.type);\n\n            let delay = 0;\n\n            if (show) {\n                ui.toggleControls.call(this.player, true);\n                // Use longer timeout for touch devices\n                delay = this.player.touch ? 3000 : 2000;\n            }\n\n            // Clear timer\n            clearTimeout(this.player.timers.controls);\n            // Timer to prevent flicker when seeking\n            this.player.timers.controls = setTimeout(() => ui.toggleControls.call(this.player, false), delay);\n        });\n    }\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.player.media, 'timeupdate seeking seeked', event => controls.timeUpdate.call(this.player, event));\n\n        // Display duration\n        utils.on(this.player.media, 'durationchange loadeddata loadedmetadata', event => controls.durationUpdate.call(this.player, event));\n\n        // Check for audio tracks on load\n        // We can't use `loadedmetadata` as it doesn't seem to have audio tracks at that point\n        utils.on(this.player.media, 'loadeddata', () => {\n            utils.toggleHidden(this.player.elements.volume, !this.player.hasAudio);\n            utils.toggleHidden(this.player.elements.buttons.mute, !this.player.hasAudio);\n        });\n\n        // Handle the media finishing\n        utils.on(this.player.media, 'ended', () => {\n            // Show poster on end\n            if (this.player.isHTML5 && this.player.isVideo && this.player.config.resetOnEnd) {\n                // Restart\n                this.player.restart();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.player.media, 'progress playing seeking seeked', event => controls.updateProgress.call(this.player, event));\n\n        // Handle volume changes\n        utils.on(this.player.media, 'volumechange', event => controls.updateVolume.call(this.player, event));\n\n        // Handle play/pause\n        utils.on(this.player.media, 'playing play pause ended emptied timeupdate', event => ui.checkPlaying.call(this.player, event));\n\n        // Loading state\n        utils.on(this.player.media, 'waiting canplay seeked playing', event => ui.checkLoading.call(this.player, event));\n\n        // If autoplay, then load advertisement if required\n        // TODO: Show some sort of loading state while the ad manager loads else there's a delay before ad shows\n        utils.on(this.player.media, 'playing', () => {\n            if (!this.player.ads) {\n                return;\n            }\n\n            // If ads are enabled, wait for them first\n            if (this.player.ads.enabled && !this.player.ads.initialized) {\n                // Wait for manager response\n                this.player.ads.managerPromise.then(() => this.player.ads.play()).catch(() => this.player.play());\n            }\n        });\n\n        // Click video\n        if (this.player.supported.ui && this.player.config.clickToPlay && !this.player.isAudio) {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this.player, `.${this.player.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!utils.is.element(wrapper)) {\n                return;\n            }\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.player.config.hideControls && this.player.touch && !this.player.paused) {\n                    return;\n                }\n\n                if (this.player.paused) {\n                    this.player.play();\n                } else if (this.player.ended) {\n                    this.player.restart();\n                    this.player.play();\n                } else {\n                    this.player.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.player.supported.ui && this.player.config.disableContextMenu) {\n            utils.on(\n                this.player.elements.wrapper,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false,\n            );\n        }\n\n        // Volume change\n        utils.on(this.player.media, 'volumechange', () => {\n            // Save to storage\n            this.player.storage.set({ volume: this.player.volume, muted: this.player.muted });\n        });\n\n        // Speed change\n        utils.on(this.player.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'speed');\n\n            // Save to storage\n            this.player.storage.set({ speed: this.player.speed });\n        });\n\n        // Quality request\n        utils.on(this.player.media, 'qualityrequested', event => {\n            // Save to storage\n            this.player.storage.set({ quality: event.detail.quality });\n        });\n\n        // Quality change\n        utils.on(this.player.media, 'qualitychange', event => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'quality', null, event.detail.quality);\n        });\n\n        // Caption language change\n        utils.on(this.player.media, 'languagechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ language: this.player.language });\n        });\n\n        // Captions toggle\n        utils.on(this.player.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ captions: this.player.captions.active });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.player.media, this.player.config.events.concat([\n            'keyup',\n            'keydown',\n        ]).join(' '), event => {\n            let detail = {};\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.player.media.error;\n            }\n\n            utils.dispatchEvent.call(this.player, this.player.elements.container, event.type, true, detail);\n        });\n    }\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Run default and custom handlers\n        const proxy = (event, defaultHandler, customHandlerKey) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = utils.is.function(customHandler);\n            let returned = true;\n\n            // Execute custom handler\n            if (hasCustomHandler) {\n                returned = customHandler.call(this.player, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (returned && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this.player, event);\n            }\n        };\n\n        // Trigger custom and default handlers\n        const on = (element, type, defaultHandler, customHandlerKey, passive = true) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = utils.is.function(customHandler);\n\n            utils.on(element, type, event => proxy(event, defaultHandler, customHandlerKey), passive && !hasCustomHandler);\n        };\n\n        // Play/pause toggle\n        on(this.player.elements.buttons.play, 'click', this.player.togglePlay, 'play');\n\n        // Pause\n        on(this.player.elements.buttons.restart, 'click', this.player.restart, 'restart');\n\n        // Rewind\n        on(this.player.elements.buttons.rewind, 'click', this.player.rewind, 'rewind');\n\n        // Rewind\n        on(this.player.elements.buttons.fastForward, 'click', this.player.forward, 'fastForward');\n\n        // Mute toggle\n        on(\n            this.player.elements.buttons.mute,\n            'click',\n            () => {\n                this.player.muted = !this.player.muted;\n            },\n            'mute',\n        );\n\n        // Captions toggle\n        on(this.player.elements.buttons.captions, 'click', this.player.toggleCaptions);\n\n        // Fullscreen toggle\n        on(\n            this.player.elements.buttons.fullscreen,\n            'click',\n            () => {\n                this.player.fullscreen.toggle();\n            },\n            'fullscreen',\n        );\n\n        // Picture-in-Picture\n        on(\n            this.player.elements.buttons.pip,\n            'click',\n            () => {\n                this.player.pip = 'toggle';\n            },\n            'pip',\n        );\n\n        // Airplay\n        on(this.player.elements.buttons.airplay, 'click', this.player.airplay, 'airplay');\n\n        // Settings menu\n        on(this.player.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this.player, event);\n        });\n\n        // Settings menu\n        on(this.player.elements.settings.form, 'click', event => {\n            event.stopPropagation();\n\n            // Go back to home tab on click\n            const showHomeTab = () => {\n                const id = `plyr-settings-${this.player.id}-home`;\n                controls.showTab.call(this.player, id);\n            };\n\n            // Settings menu items - use event delegation as items are added/removed\n            if (utils.matches(event.target, this.player.config.selectors.inputs.language)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.language = event.target.value;\n                        showHomeTab();\n                    },\n                    'language',\n                );\n            } else if (utils.matches(event.target, this.player.config.selectors.inputs.quality)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.quality = event.target.value;\n                        showHomeTab();\n                    },\n                    'quality',\n                );\n            } else if (utils.matches(event.target, this.player.config.selectors.inputs.speed)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.speed = parseFloat(event.target.value);\n                        showHomeTab();\n                    },\n                    'speed',\n                );\n            } else {\n                const tab = event.target;\n                controls.showTab.call(this.player, tab.getAttribute('aria-controls'));\n            }\n        });\n\n        // Set range input alternative \"value\", which matches the tooltip time (#954)\n        on(this.player.elements.inputs.seek, 'mousedown mousemove', event => {\n            const clientRect = this.player.elements.progress.getBoundingClientRect();\n            const percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n            event.currentTarget.setAttribute('seek-value', percent);\n        });\n\n        // Pause while seeking\n        on(this.player.elements.inputs.seek, 'mousedown mouseup keydown keyup touchstart touchend', event => {\n            const seek = event.currentTarget;\n\n            // Was playing before?\n            const play = seek.hasAttribute('play-on-seeked');\n\n            // Done seeking\n            const done = [\n                'mouseup',\n                'touchend',\n                'keyup',\n            ].includes(event.type);\n\n            // If we're done seeking and it was playing, resume playback\n            if (play && done) {\n                seek.removeAttribute('play-on-seeked');\n                this.player.play();\n            } else if (!done && this.player.playing) {\n                seek.setAttribute('play-on-seeked', '');\n                this.player.pause();\n            }\n        });\n\n        // Seek\n        on(\n            this.player.elements.inputs.seek,\n            inputEvent,\n            event => {\n                const seek = event.currentTarget;\n\n                // If it exists, use seek-value instead of \"value\" for consistency with tooltip time (#954)\n                let seekTo = seek.getAttribute('seek-value');\n\n                if (utils.is.empty(seekTo)) {\n                    seekTo = seek.value;\n                }\n\n                seek.removeAttribute('seek-value');\n\n                this.player.currentTime = seekTo / seek.max * this.player.duration;\n            },\n            'seek',\n        );\n\n        // Current time invert\n        // Only if one time element is used for both currentTime and duration\n        if (this.player.config.toggleInvert && !utils.is.element(this.player.elements.display.duration)) {\n            on(this.player.elements.display.currentTime, 'click', () => {\n                // Do nothing if we're at the start\n                if (this.player.currentTime === 0) {\n                    return;\n                }\n\n                this.player.config.invertTime = !this.player.config.invertTime;\n\n                controls.timeUpdate.call(this.player);\n            });\n        }\n\n        // Volume\n        on(\n            this.player.elements.inputs.volume,\n            inputEvent,\n            event => {\n                this.player.volume = event.target.value;\n            },\n            'volume',\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            on(utils.getElements.call(this.player, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this.player, event.target);\n            });\n        }\n\n        // Seek tooltip\n        on(this.player.elements.progress, 'mouseenter mouseleave mousemove', event => controls.updateSeekTooltip.call(this.player, event));\n\n        // Update controls.hover state (used for ui.toggleControls to avoid hiding when interacting)\n        on(this.player.elements.controls, 'mouseenter mouseleave', event => {\n            this.player.elements.controls.hover = !this.player.touch && event.type === 'mouseenter';\n        });\n\n        // Update controls.pressed state (used for ui.toggleControls to avoid hiding when interacting)\n        on(this.player.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n            this.player.elements.controls.pressed = [\n                'mousedown',\n                'touchstart',\n            ].includes(event.type);\n        });\n\n        // Focus in/out on controls\n        on(this.player.elements.controls, 'focusin focusout', event => {\n            const { config, elements, timers } = this.player;\n\n            // Skip transition to prevent focus from scrolling the parent element\n            utils.toggleClass(elements.controls, config.classNames.noTransition, event.type === 'focusin');\n\n            // Toggle\n            ui.toggleControls.call(this.player, event.type === 'focusin');\n\n            // If focusin, hide again after delay\n            if (event.type === 'focusin') {\n                // Restore transition\n                setTimeout(() => {\n                    utils.toggleClass(elements.controls, config.classNames.noTransition, false);\n                }, 0);\n\n                // Delay a little more for keyboard users\n                const delay = this.touch ? 3000 : 4000;\n\n                // Clear timer\n                clearTimeout(timers.controls);\n                // Hide\n                timers.controls = setTimeout(() => ui.toggleControls.call(this.player, false), delay);\n            }\n        });\n\n        // Mouse wheel for volume\n        on(\n            this.player.elements.inputs.volume,\n            'wheel',\n            event => {\n                // Detect \"natural\" scroll - suppored on OS X Safari only\n                // Other browsers on OS X will be inverted until support improves\n                const inverted = event.webkitDirectionInvertedFromDevice;\n                const step = 1 / 50;\n                let direction = 0;\n\n                // Scroll down (or up on natural) to decrease\n                if (event.deltaY < 0 || event.deltaX > 0) {\n                    if (inverted) {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    } else {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    }\n                }\n\n                // Scroll up (or down on natural) to increase\n                if (event.deltaY > 0 || event.deltaX < 0) {\n                    if (inverted) {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    } else {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    }\n                }\n\n                // Don't break page scrolling at max and min\n                if ((direction === 1 && this.player.media.volume < 1) || (direction === -1 && this.player.media.volume > 0)) {\n                    event.preventDefault();\n                }\n            },\n            'volume',\n            false,\n        );\n    }\n\n    // Reset on destroy\n    clear() {\n        this.global(false);\n    }\n}\n\nexport default Listeners;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport captions from './../captions';\nimport controls from './../controls';\nimport ui from './../ui';\nimport utils from './../utils';\n\n// Set playback state and trigger change (only on actual change)\nfunction assurePlaybackState(play) {\n    if (this.media.paused === play) {\n        this.media.paused = !play;\n        utils.dispatchEvent.call(this, this.media, play ? 'play' : 'pause');\n    }\n}\n\nconst vimeo = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils\n                .loadScript(this.config.urls.vimeo.sdk)\n                .then(() => {\n                    vimeo.ready.call(this);\n                })\n                .catch(error => {\n                    this.debug.warn('Vimeo API failed to load', error);\n                });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = utils.is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n\n        if (this.supported.ui) {\n            const height = 240;\n            const offset = (height - padding) / (height / 50);\n\n            this.media.style.transform = `translateY(-${offset}%)`;\n        }\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            // muted: player.muted,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n            playsinline: !this.config.fullscreen.iosNative,\n        };\n        const params = utils.buildUrlParams(options);\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (utils.is.empty(source)) {\n            source = player.media.getAttribute(player.config.attributes.embed.id);\n        }\n\n        const id = utils.parseVimeoId(source);\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = utils.format(player.config.urls.vimeo.iframe, id, params);\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        iframe.setAttribute('allowtransparency', '');\n        iframe.setAttribute('allow', 'autoplay');\n\n        // Inject the package\n        const wrapper = utils.createElement('div', { class: player.config.classNames.embedContainer });\n        wrapper.appendChild(iframe);\n        player.media = utils.replaceElement(wrapper, player.media);\n\n        // Get poster image\n        utils.fetch(utils.format(player.config.urls.vimeo.api, id), 'json').then(response => {\n            if (utils.is.empty(response)) {\n                return;\n            }\n\n            // Get the URL for thumbnail\n            const url = new URL(response[0].thumbnail_large);\n\n            // Get original image\n            url.pathname = `${url.pathname.split('_')[0]}.jpg`;\n\n            // Set and show poster\n            ui.setPoster.call(player, url.href);\n        });\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe, {\n            autopause: player.config.autopause,\n            muted: player.muted,\n        });\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Disable native text track rendering\n        if (player.supported.ui) {\n            player.embed.disableTextTrack();\n        }\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            assurePlaybackState.call(player, true);\n            return player.embed.play();\n        };\n\n        player.media.pause = () => {\n            assurePlaybackState.call(player, false);\n            return player.embed.pause();\n        };\n\n        player.media.stop = () => {\n            player.pause();\n            player.currentTime = 0;\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Vimeo will automatically play on seek if the video hasn't been played before\n\n                // Get current paused state and volume etc\n                const { embed, media, paused, volume } = player;\n\n                // Set seeking state and trigger event\n                media.seeking = true;\n                utils.dispatchEvent.call(player, media, 'seeking');\n\n                // If paused, mute until seek is complete\n                Promise.resolve(paused && embed.setVolume(0))\n                    // Seek\n                    .then(() => embed.setCurrentTime(time))\n                    // Restore paused\n                    .then(() => paused && embed.pause())\n                    // Restore volume\n                    .then(() => paused && embed.setVolume(volume))\n                    .catch(() => {\n                        // Do nothing\n                    });\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed\n                    .setPlaybackRate(input)\n                    .then(() => {\n                        speed = input;\n                        utils.dispatchEvent.call(player, player.media, 'ratechange');\n                    })\n                    .catch(error => {\n                        // Hide menu item (and menu if empty)\n                        if (error.name === 'Error') {\n                            controls.setSpeedMenu.call(player, []);\n                        }\n                    });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed\n            .getVideoUrl()\n            .then(value => {\n                currentSrc = value;\n            })\n            .catch(error => {\n                this.debug.warn(error);\n            });\n\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Ended\n        Object.defineProperty(player.media, 'ended', {\n            get() {\n                return player.currentTime === player.duration;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([\n            player.embed.getVideoWidth(),\n            player.embed.getVideoHeight(),\n        ]).then(dimensions => {\n            const ratio = utils.getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Set autopause\n        player.embed.setAutopause(player.config.autopause).then(state => {\n            player.config.autopause = state;\n        });\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.media.textTracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', data => {\n            let cue = null;\n\n            if (data.cues.length) {\n                cue = utils.stripHTML(data.cues[0].text);\n            }\n\n            captions.setText.call(player, cue);\n        });\n\n        player.embed.on('loaded', () => {\n            if (utils.is.element(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            assurePlaybackState.call(player, true);\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            assurePlaybackState.call(player, false);\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            utils.dispatchEvent.call(player, player.media, 'progress');\n\n            // Check all loaded\n            if (parseInt(data.percent, 10) === 1) {\n                utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n            }\n\n            // Get duration as if we do it before load, it gives an incorrect value\n            // https://github.com/sampotts/plyr/issues/891\n            player.embed.getDuration().then(value => {\n                if (value !== player.media.duration) {\n                    player.media.duration = value;\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n                }\n            });\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            utils.dispatchEvent.call(player, player.media, 'seeked');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            utils.dispatchEvent.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport controls from './../controls';\nimport ui from './../ui';\nimport utils from './../utils';\n\n// Standardise YouTube quality unit\nfunction mapQualityUnit(input) {\n    switch (input) {\n        case 'hd2160':\n            return 2160;\n\n        case 2160:\n            return 'hd2160';\n\n        case 'hd1440':\n            return 1440;\n\n        case 1440:\n            return 'hd1440';\n\n        case 'hd1080':\n            return 1080;\n\n        case 1080:\n            return 'hd1080';\n\n        case 'hd720':\n            return 720;\n\n        case 720:\n            return 'hd720';\n\n        case 'large':\n            return 480;\n\n        case 480:\n            return 'large';\n\n        case 'medium':\n            return 360;\n\n        case 360:\n            return 'medium';\n\n        case 'small':\n            return 240;\n\n        case 240:\n            return 'small';\n\n        default:\n            return 'default';\n    }\n}\n\nfunction mapQualityUnits(levels) {\n    if (utils.is.empty(levels)) {\n        return levels;\n    }\n\n    return utils.dedupe(levels.map(level => mapQualityUnit(level)));\n}\n\n// Set playback state and trigger change (only on actual change)\nfunction assurePlaybackState(play) {\n    if (this.media.paused === play) {\n        this.media.paused = !play;\n        utils.dispatchEvent.call(this, this.media, play ? 'play' : 'pause');\n    }\n}\n\nconst youtube = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Setup API\n        if (utils.is.object(window.YT) && utils.is.function(window.YT.Player)) {\n            youtube.ready.call(this);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.sdk).catch(error => {\n                this.debug.warn('YouTube API failed to load', error);\n            });\n\n            // Setup callback for the API\n            // YouTube has it's own system of course...\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Get the media title\n    getTitle(videoId) {\n        // Try via undocumented API method first\n        // This method disappears now and then though...\n        // https://github.com/sampotts/plyr/issues/709\n        if (utils.is.function(this.embed.getVideoData)) {\n            const { title } = this.embed.getVideoData();\n\n            if (utils.is.empty(title)) {\n                this.config.title = title;\n                ui.setTitle.call(this);\n                return;\n            }\n        }\n\n        // Or via Google API\n        const key = this.config.keys.google;\n        if (utils.is.string(key) && !utils.is.empty(key)) {\n            const url = utils.format(this.config.urls.youtube.api, videoId, key);\n\n            utils\n                .fetch(url)\n                .then(result => {\n                    if (utils.is.object(result)) {\n                        this.config.title = result.items[0].snippet.title;\n                        ui.setTitle.call(this);\n                    }\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready() {\n        const player = this;\n\n        // Ignore already setup (race condition)\n        const currentId = player.media.getAttribute('id');\n        if (!utils.is.empty(currentId) && currentId.startsWith('youtube-')) {\n            return;\n        }\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (utils.is.empty(source)) {\n            source = player.media.getAttribute(this.config.attributes.embed.id);\n        }\n\n        // Replace the <iframe> with a <div> due to YouTube API issues\n        const videoId = utils.parseYouTubeId(source);\n        const id = utils.generateId(player.provider);\n        const container = utils.createElement('div', { id });\n        player.media = utils.replaceElement(container, player.media);\n\n        // Set poster image\n        const posterSrc = format => `https://img.youtube.com/vi/${videoId}/${format}default.jpg`;\n\n        // Check thumbnail images in order of quality, but reject fallback thumbnails (120px wide)\n        utils.loadImage(posterSrc('maxres'), 121) // Higest quality and unpadded\n            .catch(() => utils.loadImage(posterSrc('sd'), 121)) // 480p padded 4:3\n            .catch(() => utils.loadImage(posterSrc('hq'))) // 360p padded 4:3. Always exists\n            .then(image => ui.setPoster.call(player, image.src))\n            .then(posterSrc => {\n                // If the image is padded, use background-size \"cover\" instead (like youtube does too with their posters)\n                if (!posterSrc.includes('maxres')) {\n                    player.elements.poster.style.backgroundSize = 'cover';\n                }\n            });\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                // origin: window ? `${window.location.protocol}//${window.location.host}` : null,\n                widget_referrer: window ? window.location.href : null,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: player.captions.active ? 1 : 0,\n                cc_lang_pref: player.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (utils.is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message = 'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    utils.dispatchEvent.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange() {\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange', false, {\n                        quality: player.media.quality,\n                    });\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get the title\n                    youtube.getTitle.call(player, videoId);\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        assurePlaybackState.call(player, true);\n                        instance.playVideo();\n                    };\n\n                    player.media.pause = () => {\n                        assurePlaybackState.call(player, false);\n                        instance.pauseVideo();\n                    };\n\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                    };\n\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // If paused, mute audio preventively (YouTube starts playing on seek if the video hasn't been played yet).\n                            if (player.paused) {\n                                player.embed.mute();\n                            }\n\n                            // Set seeking state and trigger event\n                            player.media.seeking = true;\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return mapQualityUnit(instance.getPlaybackQuality());\n                        },\n                        set(input) {\n                            const quality = input;\n\n                            // Set via API\n                            instance.setPlaybackQuality(mapQualityUnit(quality));\n\n                            // Trigger request event\n                            utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                                quality,\n                            });\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = utils.is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Ended\n                    Object.defineProperty(player.media, 'ended', {\n                        get() {\n                            return player.currentTime === player.duration;\n                        },\n                    });\n\n                    // Get available speeds\n                    player.options.speed = instance.getAvailablePlaybackRates();\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    clearInterval(player.timers.playing);\n\n                    const seeked = player.media.seeking && [\n                        1,\n                        2,\n                    ].includes(event.data);\n\n                    if (seeked) {\n                        // Unset seeking and fire seeked event\n                        player.media.seeking = false;\n                        utils.dispatchEvent.call(player, player.media, 'seeked');\n                    }\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case -1:\n                            // Update scrubber\n                            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n\n                            // Get loaded % from YouTube\n                            player.media.buffered = instance.getVideoLoadedFraction();\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n\n                            break;\n\n                        case 0:\n                            assurePlaybackState.call(player, false);\n\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                utils.dispatchEvent.call(player, player.media, 'ended');\n                            }\n\n                            break;\n\n                        case 1:\n                            // Restore paused state (YouTube starts playing on seek if the video hasn't been played yet)\n                            if (player.media.paused) {\n                                player.media.pause();\n                            } else {\n                                assurePlaybackState.call(player, true);\n\n                                utils.dispatchEvent.call(player, player.media, 'playing');\n\n                                // Poll to get playback progress\n                                player.timers.playing = setInterval(() => {\n                                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                                }, 50);\n\n                                // Check duration again due to YouTube bug\n                                // https://github.com/sampotts/plyr/issues/374\n                                // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                                if (player.media.duration !== instance.getDuration()) {\n                                    player.media.duration = instance.getDuration();\n                                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n                                }\n\n                                // Get quality\n                                controls.setQualityMenu.call(player, mapQualityUnits(instance.getAvailableQualityLevels()));\n                            }\n\n                            break;\n\n                        case 2:\n                            // Restore audio (YouTube starts playing on seek if the video hasn't been played yet)\n                            if (!player.muted) {\n                                player.embed.unMute();\n                            }\n                            assurePlaybackState.call(player, false);\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport html5 from './html5';\nimport vimeo from './plugins/vimeo';\nimport youtube from './plugins/youtube';\nimport utils from './utils';\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.debug.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add provider class\n        utils.toggleClass(this.elements.container, this.config.classNames.provider.replace('{0}', this.provider), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        // Inject the player wrapper\n        if (this.isVideo) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n\n            // Faux poster container\n            this.elements.poster = utils.createElement('div', {\n                class: this.config.classNames.poster,\n            });\n\n            this.elements.wrapper.appendChild(this.elements.poster);\n        }\n\n        if (this.isEmbed) {\n            switch (this.provider) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else if (this.isHTML5) {\n            html5.extend.call(this);\n        }\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Advertisement plugin using Google IMA HTML5 SDK\n// Create an account with our ad partner, vi here:\n// https://www.vi.ai/publisher-video-monetization/\n// ==========================================================================\n\n/* global google */\n\nimport i18n from '../i18n';\nimport utils from '../utils';\n\nclass Ads {\n    /**\n     * Ads constructor.\n     * @param {object} player\n     * @return {Ads}\n     */\n    constructor(player) {\n        this.player = player;\n        this.publisherId = player.config.ads.publisherId;\n        this.playing = false;\n        this.initialized = false;\n        this.elements = {\n            container: null,\n            displayContainer: null,\n        };\n        this.manager = null;\n        this.loader = null;\n        this.cuePoints = null;\n        this.events = {};\n        this.safetyTimer = null;\n        this.countdownTimer = null;\n\n        // Setup a promise to resolve when the IMA manager is ready\n        this.managerPromise = new Promise((resolve, reject) => {\n            // The ad is loaded and ready\n            this.on('loaded', resolve);\n\n            // Ads failed\n            this.on('error', reject);\n        });\n\n        this.load();\n    }\n\n    get enabled() {\n        return this.player.isVideo && this.player.config.ads.enabled && !utils.is.empty(this.publisherId);\n    }\n\n    /**\n     * Load the IMA SDK\n     */\n    load() {\n        if (this.enabled) {\n            // Check if the Google IMA3 SDK is loaded or load it ourselves\n            if (!utils.is.object(window.google) || !utils.is.object(window.google.ima)) {\n                utils\n                    .loadScript(this.player.config.urls.googleIMA.sdk)\n                    .then(() => {\n                        this.ready();\n                    })\n                    .catch(() => {\n                        // Script failed to load or is blocked\n                        this.trigger('error', new Error('Google IMA SDK failed to load'));\n                    });\n            } else {\n                this.ready();\n            }\n        }\n    }\n\n    /**\n     * Get the ads instance ready\n     */\n    ready() {\n        // Start ticking our safety timer. If the whole advertisement\n        // thing doesn't resolve within our set time; we bail\n        this.startSafetyTimer(12000, 'ready()');\n\n        // Clear the safety timer\n        this.managerPromise.then(() => {\n            this.clearSafetyTimer('onAdsManagerLoaded()');\n        });\n\n        // Set listeners on the Plyr instance\n        this.listeners();\n\n        // Setup the IMA SDK\n        this.setupIMA();\n    }\n\n    // Build the default tag URL\n    get tagUrl() {\n        const params = {\n            AV_PUBLISHERID: '58c25bb0073ef448b1087ad6',\n            AV_CHANNELID: '5a0458dc28a06145e4519d21',\n            AV_URL: location.hostname,\n            cb: Date.now(),\n            AV_WIDTH: 640,\n            AV_HEIGHT: 480,\n            AV_CDIM2: this.publisherId,\n        };\n\n        const base = 'https://go.aniview.com/api/adserver6/vast/';\n\n        return `${base}?${utils.buildUrlParams(params)}`;\n    }\n\n    /**\n     * In order for the SDK to display ads for our video, we need to tell it where to put them,\n     * so here we define our ad container. This div is set up to render on top of the video player.\n     * Using the code below, we tell the SDK to render ads within that div. We also provide a\n     * handle to the content video player - the SDK will poll the current time of our player to\n     * properly place mid-rolls. After we create the ad display container, we initialize it. On\n     * mobile devices, this initialization is done as the result of a user action.\n     */\n    setupIMA() {\n        // Create the container for our advertisements\n        this.elements.container = utils.createElement('div', {\n            class: this.player.config.classNames.ads,\n        });\n        this.player.elements.container.appendChild(this.elements.container);\n\n        // So we can run VPAID2\n        google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED);\n\n        // Set language\n        google.ima.settings.setLocale(this.player.config.ads.language);\n\n        // We assume the adContainer is the video container of the plyr element\n        // that will house the ads\n        this.elements.displayContainer = new google.ima.AdDisplayContainer(this.elements.container);\n\n        // Request video ads to be pre-loaded\n        this.requestAds();\n    }\n\n    /**\n     * Request advertisements\n     */\n    requestAds() {\n        const { container } = this.player.elements;\n\n        try {\n            // Create ads loader\n            this.loader = new google.ima.AdsLoader(this.elements.displayContainer);\n\n            // Listen and respond to ads loaded and error events\n            this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, event => this.onAdsManagerLoaded(event), false);\n            this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error), false);\n\n            // Request video ads\n            const request = new google.ima.AdsRequest();\n            request.adTagUrl = this.tagUrl;\n\n            // Specify the linear and nonlinear slot sizes. This helps the SDK\n            // to select the correct creative if multiple are returned\n            request.linearAdSlotWidth = container.offsetWidth;\n            request.linearAdSlotHeight = container.offsetHeight;\n            request.nonLinearAdSlotWidth = container.offsetWidth;\n            request.nonLinearAdSlotHeight = container.offsetHeight;\n\n            // We only overlay ads as we only support video.\n            request.forceNonLinearFullSlot = false;\n\n            // Mute based on current state\n            request.setAdWillPlayMuted(!this.player.muted);\n\n            this.loader.requestAds(request);\n        } catch (e) {\n            this.onAdError(e);\n        }\n    }\n\n    /**\n     * Update the ad countdown\n     * @param {boolean} start\n     */\n    pollCountdown(start = false) {\n        if (!start) {\n            clearInterval(this.countdownTimer);\n            this.elements.container.removeAttribute('data-badge-text');\n            return;\n        }\n\n        const update = () => {\n            const time = utils.formatTime(Math.max(this.manager.getRemainingTime(), 0));\n            const label = `${i18n.get('advertisement', this.player.config)} - ${time}`;\n            this.elements.container.setAttribute('data-badge-text', label);\n        };\n\n        this.countdownTimer = setInterval(update, 100);\n    }\n\n    /**\n     * This method is called whenever the ads are ready inside the AdDisplayContainer\n     * @param {Event} adsManagerLoadedEvent\n     */\n    onAdsManagerLoaded(event) {\n        // Get the ads manager\n        const settings = new google.ima.AdsRenderingSettings();\n\n        // Tell the SDK to save and restore content video state on our behalf\n        settings.restoreCustomPlaybackStateOnAdBreakComplete = true;\n        settings.enablePreloading = true;\n\n        // The SDK is polling currentTime on the contentPlayback. And needs a duration\n        // so it can determine when to start the mid- and post-roll\n        this.manager = event.getAdsManager(this.player, settings);\n\n        // Get the cue points for any mid-rolls by filtering out the pre- and post-roll\n        this.cuePoints = this.manager.getCuePoints();\n\n        // Add advertisement cue's within the time line if available\n        if (!utils.is.empty(this.cuePoints)) {\n            this.cuePoints.forEach(cuePoint => {\n                if (cuePoint !== 0 && cuePoint !== -1 && cuePoint < this.player.duration) {\n                    const seekElement = this.player.elements.progress;\n\n                    if (utils.is.element(seekElement)) {\n                        const cuePercentage = 100 / this.player.duration * cuePoint;\n                        const cue = utils.createElement('span', {\n                            class: this.player.config.classNames.cues,\n                        });\n\n                        cue.style.left = `${cuePercentage.toString()}%`;\n                        seekElement.appendChild(cue);\n                    }\n                }\n            });\n        }\n\n        // Get skippable state\n        // TODO: Skip button\n        // this.player.debug.warn(this.manager.getAdSkippableState());\n\n        // Set volume to match player\n        this.manager.setVolume(this.player.volume);\n\n        // Add listeners to the required events\n        // Advertisement error events\n        this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error));\n\n        // Advertisement regular events\n        Object.keys(google.ima.AdEvent.Type).forEach(type => {\n            this.manager.addEventListener(google.ima.AdEvent.Type[type], event => this.onAdEvent(event));\n        });\n\n        // Resolve our adsManager\n        this.trigger('loaded');\n    }\n\n    /**\n     * This is where all the event handling takes place. Retrieve the ad from the event. Some\n     * events (e.g. ALL_ADS_COMPLETED) don't have the ad object associated\n     * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type\n     * @param {Event} event\n     */\n    onAdEvent(event) {\n        const { container } = this.player.elements;\n\n        // Retrieve the ad from the event. Some events (e.g. ALL_ADS_COMPLETED)\n        // don't have ad object associated\n        const ad = event.getAd();\n\n        // Proxy event\n        const dispatchEvent = type => {\n            const event = `ads${type.replace(/_/g, '').toLowerCase()}`;\n            utils.dispatchEvent.call(this.player, this.player.media, event);\n        };\n\n        switch (event.type) {\n            case google.ima.AdEvent.Type.LOADED:\n                // This is the first event sent for an ad - it is possible to determine whether the\n                // ad is a video ad or an overlay\n                this.trigger('loaded');\n\n                // Bubble event\n                dispatchEvent(event.type);\n\n                // Start countdown\n                this.pollCountdown(true);\n\n                if (!ad.isLinear()) {\n                    // Position AdDisplayContainer correctly for overlay\n                    ad.width = container.offsetWidth;\n                    ad.height = container.offsetHeight;\n                }\n\n                // console.info('Ad type: ' + event.getAd().getAdPodInfo().getPodIndex());\n                // console.info('Ad time: ' + event.getAd().getAdPodInfo().getTimeOffset());\n                break;\n\n            case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:\n                // All ads for the current videos are done. We can now request new advertisements\n                // in case the video is re-played\n\n                // Fire event\n                dispatchEvent(event.type);\n\n                // TODO: Example for what happens when a next video in a playlist would be loaded.\n                // So here we load a new video when all ads are done.\n                // Then we load new ads within a new adsManager. When the video\n                // Is started - after - the ads are loaded, then we get ads.\n                // You can also easily test cancelling and reloading by running\n                // player.ads.cancel() and player.ads.play from the console I guess.\n                // this.player.source = {\n                //     type: 'video',\n                //     title: 'View From A Blue Moon',\n                //     sources: [{\n                //         src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.mp4', type:\n                // 'video/mp4', }], poster:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg', tracks:\n                // [ { kind: 'captions', label: 'English', srclang: 'en', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt',\n                // default: true, }, { kind: 'captions', label: 'French', srclang: 'fr', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt', }, ],\n                // };\n\n                // TODO: So there is still this thing where a video should only be allowed to start\n                // playing when the IMA SDK is ready or has failed\n\n                this.loadAds();\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:\n                // This event indicates the ad has started - the video player can adjust the UI,\n                // for example display a pause button and remaining time. Fired when content should\n                // be paused. This usually happens right before an ad is about to cover the content\n\n                dispatchEvent(event.type);\n\n                this.pauseContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:\n                // This event indicates the ad has finished - the video player can perform\n                // appropriate UI actions, such as removing the timer for remaining time detection.\n                // Fired when content should be resumed. This usually happens when an ad finishes\n                // or collapses\n\n                dispatchEvent(event.type);\n\n                this.pollCountdown();\n\n                this.resumeContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.STARTED:\n            case google.ima.AdEvent.Type.MIDPOINT:\n            case google.ima.AdEvent.Type.COMPLETE:\n            case google.ima.AdEvent.Type.IMPRESSION:\n            case google.ima.AdEvent.Type.CLICK:\n                dispatchEvent(event.type);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Any ad error handling comes through here\n     * @param {Event} event\n     */\n    onAdError(event) {\n        this.cancel();\n        this.player.debug.warn('Ads error', event);\n    }\n\n    /**\n     * Setup hooks for Plyr and window events. This ensures\n     * the mid- and post-roll launch at the correct time. And\n     * resize the advertisement when the player resizes\n     */\n    listeners() {\n        const { container } = this.player.elements;\n        let time;\n\n        // Add listeners to the required events\n        this.player.on('ended', () => {\n            this.loader.contentComplete();\n        });\n\n        this.player.on('seeking', () => {\n            time = this.player.currentTime;\n            return time;\n        });\n\n        this.player.on('seeked', () => {\n            const seekedTime = this.player.currentTime;\n\n            if (utils.is.empty(this.cuePoints)) {\n                return;\n            }\n\n            this.cuePoints.forEach((cuePoint, index) => {\n                if (time < cuePoint && cuePoint < seekedTime) {\n                    this.manager.discardAdBreak();\n                    this.cuePoints.splice(index, 1);\n                }\n            });\n        });\n\n        // Listen to the resizing of the window. And resize ad accordingly\n        // TODO: eventually implement ResizeObserver\n        window.addEventListener('resize', () => {\n            if (this.manager) {\n                this.manager.resize(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n            }\n        });\n    }\n\n    /**\n     * Initialize the adsManager and start playing advertisements\n     */\n    play() {\n        const { container } = this.player.elements;\n\n        if (!this.managerPromise) {\n            this.resumeContent();\n        }\n\n        // Play the requested advertisement whenever the adsManager is ready\n        this.managerPromise\n            .then(() => {\n                // Initialize the container. Must be done via a user action on mobile devices\n                this.elements.displayContainer.initialize();\n\n                try {\n                    if (!this.initialized) {\n                        // Initialize the ads manager. Ad rules playlist will start at this time\n                        this.manager.init(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n\n                        // Call play to start showing the ad. Single video and overlay ads will\n                        // start at this time; the call will be ignored for ad rules\n                        this.manager.start();\n                    }\n\n                    this.initialized = true;\n                } catch (adError) {\n                    // An error may be thrown if there was a problem with the\n                    // VAST response\n                    this.onAdError(adError);\n                }\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Resume our video\n     */\n    resumeContent() {\n        // Hide the advertisement container\n        this.elements.container.style.zIndex = '';\n\n        // Ad is stopped\n        this.playing = false;\n\n        // Play our video\n        if (this.player.currentTime < this.player.duration) {\n            this.player.play();\n        }\n    }\n\n    /**\n     * Pause our video\n     */\n    pauseContent() {\n        // Show the advertisement container\n        this.elements.container.style.zIndex = 3;\n\n        // Ad is playing.\n        this.playing = true;\n\n        // Pause our video.\n        this.player.pause();\n    }\n\n    /**\n     * Destroy the adsManager so we can grab new ads after this. If we don't then we're not\n     * allowed to call new ads based on google policies, as they interpret this as an accidental\n     * video requests. https://developers.google.com/interactive-\n     * media-ads/docs/sdks/android/faq#8\n     */\n    cancel() {\n        // Pause our video\n        if (this.initialized) {\n            this.resumeContent();\n        }\n\n        // Tell our instance that we're done for now\n        this.trigger('error');\n\n        // Re-create our adsManager\n        this.loadAds();\n    }\n\n    /**\n     * Re-create our adsManager\n     */\n    loadAds() {\n        // Tell our adsManager to go bye bye\n        this.managerPromise\n            .then(() => {\n                // Destroy our adsManager\n                if (this.manager) {\n                    this.manager.destroy();\n                }\n\n                // Re-set our adsManager promises\n                this.managerPromise = new Promise(resolve => {\n                    this.on('loaded', resolve);\n                    this.player.debug.log(this.manager);\n                });\n\n                // Now request some new advertisements\n                this.requestAds();\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Handles callbacks after an ad event was invoked\n     * @param {string} event - Event type\n     */\n    trigger(event, ...args) {\n        const handlers = this.events[event];\n\n        if (utils.is.array(handlers)) {\n            handlers.forEach(handler => {\n                if (utils.is.function(handler)) {\n                    handler.apply(this, args);\n                }\n            });\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     * @return {Ads}\n     */\n    on(event, callback) {\n        if (!utils.is.array(this.events[event])) {\n            this.events[event] = [];\n        }\n\n        this.events[event].push(callback);\n\n        return this;\n    }\n\n    /**\n     * Setup a safety timer for when the ad network doesn't respond for whatever reason.\n     * The advertisement has 12 seconds to get its things together. We stop this timer when the\n     * advertisement is playing, or when a user action is required to start, then we clear the\n     * timer on ad ready\n     * @param {number} time\n     * @param {string} from\n     */\n    startSafetyTimer(time, from) {\n        this.player.debug.log(`Safety timer invoked from: ${from}`);\n\n        this.safetyTimer = setTimeout(() => {\n            this.cancel();\n            this.clearSafetyTimer('startSafetyTimer()');\n        }, time);\n    }\n\n    /**\n     * Clear our safety timer(s)\n     * @param {string} from\n     */\n    clearSafetyTimer(from) {\n        if (!utils.is.nullOrUndefined(this.safetyTimer)) {\n            this.player.debug.log(`Safety timer cleared from: ${from}`);\n\n            clearTimeout(this.safetyTimer);\n            this.safetyTimer = null;\n        }\n    }\n}\n\nexport default Ads;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport html5 from './html5';\nimport media from './media';\nimport support from './support';\nimport { providers } from './types';\nimport ui from './ui';\nimport utils from './utils';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.debug.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        html5.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // Reset quality options\n                this.options.quality = [];\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.element(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type and provider\n                this.type = input.type;\n                this.provider = !utils.is.empty(input.sources[0].provider) ? input.sources[0].provider : providers.html5;\n\n                // Check for support\n                this.supported = support.check(this.type, this.provider, this.config.playsinline);\n\n                // Create new markup\n                switch (`${this.provider}:${this.type}`) {\n                    case 'html5:video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'html5:audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube:video':\n                    case 'vimeo:video':\n                        this.media = utils.createElement('div', {\n                            src: input.sources[0].src,\n                        });\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if (!utils.is.empty(input.poster)) {\n                        this.poster = input.poster;\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.playsinline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hook\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n\n                // Update the fullscreen support\n                this.fullscreen.update();\n            },\n            true,\n        );\n    },\n};\n\nexport default source;\n","// ==========================================================================\n// Plyr\n// plyr.js v3.3.7\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport captions from './captions';\nimport Console from './console';\nimport controls from './controls';\nimport defaults from './defaults';\nimport Fullscreen from './fullscreen';\nimport Listeners from './listeners';\nimport media from './media';\nimport Ads from './plugins/ads';\nimport source from './source';\nimport Storage from './storage';\nimport support from './support';\nimport { providers, types } from './types';\nimport ui from './ui';\nimport utils from './utils';\n\n// Private properties\n// TODO: Use a WeakMap for private globals\n// const globals = new WeakMap();\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n\n        // State\n        this.ready = false;\n        this.loading = false;\n        this.failed = false;\n\n        // Touch device\n        this.touch = support.touch;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if ((window.jQuery && this.media instanceof jQuery) || utils.is.nodeList(this.media) || utils.is.array(this.media)) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            Plyr.defaults,\n            options || {},\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr-config'));\n                } catch (e) {\n                    return {};\n                }\n            })(),\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            active: null,\n            currentTrack: null,\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n            captions: [],\n        };\n\n        // Debugging\n        // TODO: move to globals\n        this.debug = new Console(this.config.debug);\n\n        // Log config options and support\n        this.debug.log('Config', this.config);\n        this.debug.log('Support', support);\n\n        // We need an element to setup\n        if (utils.is.nullOrUndefined(this.media) || !utils.is.element(this.media)) {\n            this.debug.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.debug.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.debug.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        const clone = this.media.cloneNode(true);\n        clone.autoplay = false;\n        this.elements.original = clone;\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Embed properties\n        let iframe = null;\n        let url = null;\n        let params = null;\n\n        // Different setup based on type\n        switch (type) {\n            case 'div':\n                // Find the frame\n                iframe = this.media.querySelector('iframe');\n\n                // <iframe> type\n                if (utils.is.element(iframe)) {\n                    // Detect provider\n                    url = iframe.getAttribute('src');\n                    this.provider = utils.getProviderByUrl(url);\n\n                    // Rework elements\n                    this.elements.container = this.media;\n                    this.media = iframe;\n\n                    // Reset classname\n                    this.elements.container.className = '';\n\n                    // Get attributes from URL and set config\n                    params = utils.getUrlParams(url);\n                    if (!utils.is.empty(params)) {\n                        const truthy = [\n                            '1',\n                            'true',\n                        ];\n\n                        if (truthy.includes(params.autoplay)) {\n                            this.config.autoplay = true;\n                        }\n                        if (truthy.includes(params.loop)) {\n                            this.config.loop.active = true;\n                        }\n\n                        // TODO: replace fullscreen.iosNative with this playsinline config option\n                        // YouTube requires the playsinline in the URL\n                        if (this.isYouTube) {\n                            this.config.playsinline = truthy.includes(params.playsinline);\n                        } else {\n                            this.config.playsinline = true;\n                        }\n                    }\n                } else {\n                    // <div> with attributes\n                    this.provider = this.media.getAttribute(this.config.attributes.embed.provider);\n\n                    // Remove attribute\n                    this.media.removeAttribute(this.config.attributes.embed.provider);\n                }\n\n                // Unsupported or missing provider\n                if (utils.is.empty(this.provider) || !Object.keys(providers).includes(this.provider)) {\n                    this.debug.error('Setup failed: Invalid provider');\n                    return;\n                }\n\n                // Audio will come later for external providers\n                this.type = types.video;\n\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n                this.provider = providers.html5;\n\n                // Get config from attributes\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.playsinline = true;\n                }\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.debug.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.provider, this.config.playsinline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Create listeners\n        this.listeners = new Listeners(this);\n\n        // Setup local storage for user settings\n        this.storage = new Storage(this);\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        if (!utils.is.element(this.elements.container)) {\n            this.elements.container = utils.createElement('div');\n            utils.wrap(this.media, this.elements.container);\n        }\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.debug.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n\n        // Container listeners\n        this.listeners.container();\n\n        // Global listeners\n        this.listeners.global();\n\n        // Setup fullscreen\n        this.fullscreen = new Fullscreen(this);\n\n        // Setup ads if provided\n        this.ads = new Ads(this);\n\n        // Autoplay if required\n        if (this.config.autoplay) {\n            this.play();\n        }\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * Types and provider helpers\n     */\n    get isHTML5() {\n        return Boolean(this.provider === providers.html5);\n    }\n    get isEmbed() {\n        return Boolean(this.isYouTube || this.isVimeo);\n    }\n    get isYouTube() {\n        return Boolean(this.provider === providers.youtube);\n    }\n    get isVimeo() {\n        return Boolean(this.provider === providers.vimeo);\n    }\n    get isVideo() {\n        return Boolean(this.type === types.video);\n    }\n    get isAudio() {\n        return Boolean(this.type === types.audio);\n    }\n\n    /**\n     * Play the media, or play the advertisement (if they are not blocked)\n     */\n    play() {\n        if (!utils.is.function(this.media.play)) {\n            return null;\n        }\n\n        // Return the promise (for HTML5)\n        return this.media.play();\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if (!this.playing || !utils.is.function(this.media.pause)) {\n            return;\n        }\n\n        this.media.pause();\n    }\n\n    /**\n     * Get playing state\n     */\n    get playing() {\n        return Boolean(this.ready && !this.paused && !this.ended);\n    }\n\n    /**\n     * Get paused state\n     */\n    get paused() {\n        return Boolean(this.media.paused);\n    }\n\n    /**\n     * Get stopped state\n     */\n    get stopped() {\n        return Boolean(this.paused && this.currentTime === 0);\n    }\n\n    /**\n     * Get ended state\n     */\n    get ended() {\n        return Boolean(this.media.ended);\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} input\n     */\n    togglePlay(input) {\n        // Toggle based on current state if nothing passed\n        const toggle = utils.is.boolean(input) ? input : !this.playing;\n\n        if (toggle) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        if (this.isHTML5) {\n            this.pause();\n            this.restart();\n        } else if (utils.is.function(this.media.stop)) {\n            this.media.stop();\n        }\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        let targetTime = 0;\n\n        if (utils.is.number(input)) {\n            targetTime = input;\n        }\n\n        // Normalise targetTime\n        if (targetTime < 0) {\n            targetTime = 0;\n        } else if (targetTime > this.duration) {\n            targetTime = this.duration;\n        }\n\n        // Set\n        this.media.currentTime = targetTime;\n\n        // Logging\n        this.debug.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    /**\n     * Get current time\n     */\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get buffered\n     */\n    get buffered() {\n        const { buffered } = this.media;\n\n        // YouTube / Vimeo return a float between 0-1\n        if (utils.is.number(buffered)) {\n            return buffered;\n        }\n\n        // HTML5\n        // TODO: Handle buffered chunks of the media\n        // (i.e. seek to another section buffers only that section)\n        if (buffered && buffered.length && this.duration > 0) {\n            return buffered.end(0) / this.duration;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get seeking status\n     */\n    get seeking() {\n        return Boolean(this.media.seeking);\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseFloat(this.config.duration);\n\n        // True duration\n        const realDuration = this.media ? Number(this.media.duration) : 0;\n\n        // If custom duration is funky, use regular duration\n        return !Number.isNaN(fauxDuration) ? fauxDuration : realDuration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (utils.is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            volume = this.storage.get('volume');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume manually, reset muted state\n        if (!utils.is.empty(value) && this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return Number(this.media.volume);\n    }\n\n    /**\n     * Increase volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Decrease volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Set muted state\n     * @param {boolean} mute\n     */\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.storage.get('muted');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    /**\n     * Get current muted state\n     */\n    get muted() {\n        return Boolean(this.media.muted);\n    }\n\n    /**\n     * Check if the media has audio\n     */\n    get hasAudio() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n            return true;\n        }\n\n        if (this.isAudio) {\n            return true;\n        }\n\n        // Get audio tracks\n        return (\n            Boolean(this.media.mozHasAudio) ||\n            Boolean(this.media.webkitAudioDecodedByteCount) ||\n            Boolean(this.media.audioTracks && this.media.audioTracks.length)\n        );\n    }\n\n    /**\n     * Set playback speed\n     * @param {number} speed - the speed of playback (0.5-2.0)\n     */\n    set speed(input) {\n        let speed = null;\n\n        if (utils.is.number(input)) {\n            speed = input;\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.storage.get('speed');\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.debug.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    /**\n     * Get current playback speed\n     */\n    get speed() {\n        return Number(this.media.playbackRate);\n    }\n\n    /**\n     * Set playback quality\n     * Currently HTML5 & YouTube only\n     * @param {number} input - Quality level\n     */\n    set quality(input) {\n        let quality = null;\n\n        if (!utils.is.empty(input)) {\n            quality = Number(input);\n        }\n\n        if (!utils.is.number(quality) || quality === 0) {\n            quality = this.storage.get('quality');\n        }\n\n        if (!utils.is.number(quality)) {\n            quality = this.config.quality.selected;\n        }\n\n        if (!utils.is.number(quality)) {\n            quality = this.config.quality.default;\n        }\n\n        if (!this.options.quality.length) {\n            return;\n        }\n\n        if (!this.options.quality.includes(quality)) {\n            const closest = utils.closest(this.options.quality, quality);\n            this.debug.warn(`Unsupported quality option: ${quality}, using ${closest} instead`);\n            quality = closest;\n        }\n\n        // Update config\n        this.config.quality.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    /**\n     * Get current quality level\n     */\n    get quality() {\n        return this.media.quality;\n    }\n\n    /**\n     * Toggle loop\n     * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n     * @param {boolean} input - Whether to loop or not\n     */\n    set loop(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    /**\n     * Get current loop state\n     */\n    get loop() {\n        return Boolean(this.media.loop);\n    }\n\n    /**\n     * Set new media source\n     * @param {object} input - The new source object (see docs)\n     */\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    /**\n     * Get current source\n     */\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    /**\n     * Set the poster image for a video\n     * @param {input} - the URL for the new poster image\n     */\n    set poster(input) {\n        if (!this.isVideo) {\n            this.debug.warn('Poster can only be set for video');\n            return;\n        }\n\n        ui.setPoster.call(this, input);\n    }\n\n    /**\n     * Get the current poster image\n     */\n    get poster() {\n        if (!this.isVideo) {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    /**\n     * Set the autoplay state\n     * @param {boolean} input - Whether to autoplay or not\n     */\n    set autoplay(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    /**\n     * Get the current autoplay state\n     */\n    get autoplay() {\n        return Boolean(this.config.autoplay);\n    }\n\n    /**\n     * Toggle captions\n     * @param {boolean} input - Whether to enable captions\n     */\n    toggleCaptions(input) {\n        // If there's no full support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const show = utils.is.boolean(input) ? input : !this.elements.container.classList.contains(this.config.classNames.captions.active);\n\n        // Nothing to change...\n        if (this.captions.active === show) {\n            return;\n        }\n\n        // Set global\n        this.captions.active = show;\n\n        // Toggle state\n        utils.toggleState(this.elements.buttons.captions, this.captions.active);\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, this.captions.active);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.captions.active ? 'captionsenabled' : 'captionsdisabled');\n    }\n\n    /**\n     * Set the captions language\n     * @param {string} - Two character ISO language code (e.g. EN, FR, PT, etc)\n     */\n    set language(input) {\n        // Nothing specified\n        if (!utils.is.string(input)) {\n            return;\n        }\n\n        // If empty string is passed, assume disable captions\n        if (utils.is.empty(input)) {\n            this.toggleCaptions(false);\n            return;\n        }\n\n        // Normalize\n        const language = input.toLowerCase();\n\n        // Check for support\n        if (!this.options.captions.includes(language)) {\n            this.debug.warn(`Unsupported language option: ${language}`);\n            return;\n        }\n\n        // Ensure captions are enabled\n        this.toggleCaptions(true);\n\n        // Enabled only\n        if (language === 'enabled') {\n            return;\n        }\n\n        // If nothing to change, bail\n        if (this.language === language) {\n            return;\n        }\n\n        // Update config\n        this.captions.language = language;\n\n        // Clear caption\n        captions.setText.call(this, null);\n\n        // Update captions\n        captions.setLanguage.call(this);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, 'languagechange');\n    }\n\n    /**\n     * Get the current captions language\n     */\n    get language() {\n        return this.captions.language;\n    }\n\n    /**\n     * Toggle picture-in-picture playback on WebKit/MacOS\n     * TODO: update player with state, support, enabled\n     * TODO: detect outside changes\n     */\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    /**\n     * Get the current picture-in-picture state\n     */\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    /**\n     * Trigger the airplay dialog\n     * TODO: update player with state, support, enabled\n     */\n    airplay() {\n        // Show dialog if supported\n        if (support.airplay) {\n            this.media.webkitShowPlaybackTargetPicker();\n        }\n    }\n\n    /**\n     * Toggle the player controls\n     * @param {boolean} [toggle] - Whether to show the controls\n     */\n    toggleControls(toggle) {\n        // Don't toggle if missing UI support or if it's audio\n        if (this.supported.ui && !this.isAudio) {\n            // Get state before change\n            const isHidden = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n\n            // Negate the argument if not undefined since adding the class to hides the controls\n            const force = typeof toggle === 'undefined' ? undefined : !toggle;\n\n            // Apply and get updated state\n            const hiding = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, force);\n\n            // Close menu\n            if (hiding && this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                controls.toggleMenu.call(this, false);\n            }\n            // Trigger event on change\n            if (hiding !== isHidden) {\n                const eventName = hiding ? 'controlshidden' : 'controlsshown';\n                utils.dispatchEvent.call(this, this.media, eventName);\n            }\n            return !hiding;\n        }\n        return false;\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n    }\n\n    /**\n     * Remove event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n    }\n\n    /**\n     * Destroy an instance\n     * Event listeners are removed when elements are removed\n     * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n     * @param {function} callback - Callback for when destroy is complete\n     * @param {boolean} soft - Whether it's a soft destroy (for source changes etc)\n     */\n    destroy(callback, soft = false) {\n        if (!this.ready) {\n            return;\n        }\n\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove elements\n                    utils.removeElement(this.elements.buttons.play);\n                    utils.removeElement(this.elements.captions);\n                    utils.removeElement(this.elements.controls);\n                    utils.removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Unbind listeners\n                this.listeners.clear();\n\n                // Replace the container with the original element provided\n                utils.replaceElement(this.elements.original, this.elements.container);\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Reset state\n                this.ready = false;\n\n                // Clear for garbage collection\n                setTimeout(() => {\n                    this.elements = null;\n                    this.media = null;\n                }, 200);\n            }\n        };\n\n        // Stop playback\n        this.stop();\n\n        // Type specific stuff\n        switch (`${this.provider}:${this.type}`) {\n            case 'html5:video':\n            case 'html5:audio':\n                // Clear timeout\n                clearTimeout(this.timers.loading);\n\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'youtube:video':\n                // Clear timers\n                clearInterval(this.timers.buffering);\n                clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                if (this.embed !== null && utils.is.function(this.embed.destroy)) {\n                    this.embed.destroy();\n                }\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo:video':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                if (this.embed !== null) {\n                    this.embed.unload().then(done);\n                }\n\n                // Vimeo does not always return\n                setTimeout(done, 200);\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Check for support for a mime type (HTML5 only)\n     * @param {string} type - Mime type\n     */\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    /**\n     * Check for support\n     * @param {string} type - Player type (audio/video)\n     * @param {string} provider - Provider (html5/youtube/vimeo)\n     * @param {bool} inline - Where player has `playsinline` sttribute\n     */\n    static supported(type, provider, inline) {\n        return support.check(type, provider, inline);\n    }\n\n    /**\n     * Load an SVG sprite into the page\n     * @param {string} url - URL for the SVG sprite\n     * @param {string} [id] - Unique ID\n     */\n    static loadSprite(url, id) {\n        return utils.loadSprite(url, id);\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {*} selector\n     * @param {object} options\n     */\n    static setup(selector, options = {}) {\n        let targets = null;\n\n        if (utils.is.string(selector)) {\n            targets = Array.from(document.querySelectorAll(selector));\n        } else if (utils.is.nodeList(selector)) {\n            targets = Array.from(selector);\n        } else if (utils.is.array(selector)) {\n            targets = selector.filter(i => utils.is.element(i));\n        }\n\n        if (utils.is.empty(targets)) {\n            return null;\n        }\n\n        return targets.map(t => new Plyr(t, options));\n    }\n}\n\nPlyr.defaults = utils.cloneDeep(defaults);\n\nexport default Plyr;\n"]}